"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolCfSingleRedirectRawRecord = void 0;
const dnscontrol_raw_record_1 = require("../raw-record/dnscontrol-raw-record");
const DNS_CONTROL_CF_SINGLE_REDIRECT_RAW_RECORD_SYMBOL = Symbol.for("DnscontrolCfSingleRedirectRawRecord");
// eslint-disable-next-line
const redirectCodes = [301, 302];
class DnscontrolCfSingleRedirectRawRecord extends dnscontrol_raw_record_1.DnscontrolRawRecord {
    name;
    code;
    when;
    then;
    constructor(scope, id, props) {
        super(scope, id, {
            rawRecordType: "CLOUDFLAREAPI_SINGLE_REDIRECT",
            ttl: props.ttl,
        });
        this.name = props.name;
        this.code = props.code;
        this.when = props.when;
        this.then = props.then;
    }
    static isDnscontrolCfSingleRedirectRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_CF_SINGLE_REDIRECT_RAW_RECORD_SYMBOL in x);
    }
    renderRawRecordConfig() {
        return {
            recordType: this.rawRecordType,
            ttl: this.ttl?.toSeconds(),
            args: [this.name, this.code, this.when, this.then],
            metas: [{ orig_custom_type: "CLOUDFLAREAPI_SINGLE_REDIRECT" }],
        };
    }
}
exports.DnscontrolCfSingleRedirectRawRecord = DnscontrolCfSingleRedirectRawRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Ytc2luZ2xlLXJlZGlyZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2Ytc2luZ2xlLXJlZGlyZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLCtFQUEwRTtBQUUxRSxNQUFNLGdEQUFnRCxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQ2pFLHFDQUFxQyxDQUN0QyxDQUFDO0FBRUYsMkJBQTJCO0FBQzNCLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBVSxDQUFDO0FBVzFDLE1BQWEsbUNBQW9DLFNBQVEsMkNBQW1CO0lBQzFELElBQUksQ0FBUztJQUNiLElBQUksQ0FBZTtJQUNuQixJQUFJLENBQVM7SUFDYixJQUFJLENBQVM7SUFDN0IsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBNEM7UUFFNUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixhQUFhLEVBQUUsK0JBQStCO1lBQzlDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztTQUNmLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBQ00sTUFBTSxDQUFDLGtDQUFrQyxDQUM5QyxDQUFVO1FBRVYsT0FBTyxDQUNMLENBQUMsSUFBSSxJQUFJO1lBQ1QsT0FBTyxDQUFDLEtBQUssUUFBUTtZQUNyQixnREFBZ0QsSUFBSSxDQUFDLENBQ3RELENBQUM7SUFDSixDQUFDO0lBQ00scUJBQXFCO1FBQzFCLE9BQU87WUFDTCxVQUFVLEVBQUUsSUFBSSxDQUFDLGFBQWE7WUFDOUIsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQzFCLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDbEQsS0FBSyxFQUFFLENBQUMsRUFBRSxnQkFBZ0IsRUFBRSwrQkFBK0IsRUFBRSxDQUFDO1NBQy9ELENBQUM7SUFDSixDQUFDO0NBQ0Y7QUFwQ0Qsa0ZBb0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERuc2NvbnRyb2xDZlNpbmdsZVJlZGlyZWN0UmF3UmVjb3JkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Ruc2NvbnRyb2wtcmF3LXJlY29yZC1jb25maWdcIjtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2R1cmF0aW9uXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sUmF3UmVjb3JkIH0gZnJvbSBcIi4uL3Jhdy1yZWNvcmQvZG5zY29udHJvbC1yYXctcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX0NGX1NJTkdMRV9SRURJUkVDVF9SQVdfUkVDT1JEX1NZTUJPTCA9IFN5bWJvbC5mb3IoXG4gIFwiRG5zY29udHJvbENmU2luZ2xlUmVkaXJlY3RSYXdSZWNvcmRcIixcbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuY29uc3QgcmVkaXJlY3RDb2RlcyA9IFszMDEsIDMwMl0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBSZWRpcmVjdENvZGUgPSAodHlwZW9mIHJlZGlyZWN0Q29kZXMpW251bWJlcl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5zY29udHJvbENmU2luZ2xlUmVkaXJlY3RSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgY29kZTogUmVkaXJlY3RDb2RlO1xuICByZWFkb25seSB3aGVuOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRoZW46IHN0cmluZztcbiAgcmVhZG9ubHkgdHRsPzogRHVyYXRpb24gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEbnNjb250cm9sQ2ZTaW5nbGVSZWRpcmVjdFJhd1JlY29yZCBleHRlbmRzIERuc2NvbnRyb2xSYXdSZWNvcmQge1xuICBwdWJsaWMgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgY29kZTogUmVkaXJlY3RDb2RlO1xuICBwdWJsaWMgcmVhZG9ubHkgd2hlbjogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgdGhlbjogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcHM6IERuc2NvbnRyb2xDZlNpbmdsZVJlZGlyZWN0UmVjb3JkUHJvcHMsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgcmF3UmVjb3JkVHlwZTogXCJDTE9VREZMQVJFQVBJX1NJTkdMRV9SRURJUkVDVFwiLFxuICAgICAgdHRsOiBwcm9wcy50dGwsXG4gICAgfSk7XG4gICAgdGhpcy5uYW1lID0gcHJvcHMubmFtZTtcbiAgICB0aGlzLmNvZGUgPSBwcm9wcy5jb2RlO1xuICAgIHRoaXMud2hlbiA9IHByb3BzLndoZW47XG4gICAgdGhpcy50aGVuID0gcHJvcHMudGhlbjtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzRG5zY29udHJvbENmU2luZ2xlUmVkaXJlY3RSZWNvcmQoXG4gICAgeDogdW5rbm93bixcbiAgKTogeCBpcyBEbnNjb250cm9sQ2ZTaW5nbGVSZWRpcmVjdFJhd1JlY29yZCB7XG4gICAgcmV0dXJuIChcbiAgICAgIHggIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIEROU19DT05UUk9MX0NGX1NJTkdMRV9SRURJUkVDVF9SQVdfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmF3UmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xDZlNpbmdsZVJlZGlyZWN0UmF3UmVjb3JkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgcmVjb3JkVHlwZTogdGhpcy5yYXdSZWNvcmRUeXBlLFxuICAgICAgdHRsOiB0aGlzLnR0bD8udG9TZWNvbmRzKCksXG4gICAgICBhcmdzOiBbdGhpcy5uYW1lLCB0aGlzLmNvZGUsIHRoaXMud2hlbiwgdGhpcy50aGVuXSxcbiAgICAgIG1ldGFzOiBbeyBvcmlnX2N1c3RvbV90eXBlOiBcIkNMT1VERkxBUkVBUElfU0lOR0xFX1JFRElSRUNUXCIgfV0sXG4gICAgfTtcbiAgfVxufVxuIl19