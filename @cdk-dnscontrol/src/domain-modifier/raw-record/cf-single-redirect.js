"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolCfSingleRedirectRawRecord = void 0;
const dnscontrol_raw_record_1 = require("../raw-record/dnscontrol-raw-record");
const DNS_CONTROL_CF_SINGLE_REDIRECT_RAW_RECORD_SYMBOL = Symbol.for("DnscontrolCfSingleRedirectRawRecord");
// eslint-disable-next-line
const redirectCodes = [301, 302, 303, 307, 308];
class DnscontrolCfSingleRedirectRawRecord extends dnscontrol_raw_record_1.DnscontrolRawRecord {
    name;
    code;
    when;
    then;
    constructor(scope, id, props) {
        super(scope, id, {
            rawRecordType: "CLOUDFLAREAPI_SINGLE_REDIRECT",
            ttl: props.ttl,
            metas: props.metas,
        });
        this.name = props.name;
        this.code = props.code;
        this.when = props.when;
        this.then = props.then;
    }
    static isDnscontrolCfSingleRedirectRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_CF_SINGLE_REDIRECT_RAW_RECORD_SYMBOL in x);
    }
    renderRawRecordConfig() {
        return {
            recordType: this.rawRecordType,
            ttl: this.ttl?.toSeconds(),
            args: [this.name, this.code, this.when, this.then],
            metas: this.metas == null
                ? undefined
                : Object.entries(this.metas).map(([key, value]) => ({
                    [key]: value,
                })),
        };
    }
}
exports.DnscontrolCfSingleRedirectRawRecord = DnscontrolCfSingleRedirectRawRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Ytc2luZ2xlLXJlZGlyZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2Ytc2luZ2xlLXJlZGlyZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLCtFQUEwRTtBQUUxRSxNQUFNLGdEQUFnRCxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQ2pFLHFDQUFxQyxDQUN0QyxDQUFDO0FBRUYsMkJBQTJCO0FBQzNCLE1BQU0sYUFBYSxHQUFHLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsQ0FBVSxDQUFDO0FBWXpELE1BQWEsbUNBQW9DLFNBQVEsMkNBQW1CO0lBQzFELElBQUksQ0FBUztJQUNiLElBQUksQ0FBZTtJQUNuQixJQUFJLENBQVM7SUFDYixJQUFJLENBQVM7SUFDN0IsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBNEM7UUFFNUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixhQUFhLEVBQUUsK0JBQStCO1lBQzlDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztTQUNuQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7SUFDekIsQ0FBQztJQUNNLE1BQU0sQ0FBQyxrQ0FBa0MsQ0FDOUMsQ0FBVTtRQUVWLE9BQU8sQ0FDTCxDQUFDLElBQUksSUFBSTtZQUNULE9BQU8sQ0FBQyxLQUFLLFFBQVE7WUFDckIsZ0RBQWdELElBQUksQ0FBQyxDQUN0RCxDQUFDO0lBQ0osQ0FBQztJQUNNLHFCQUFxQjtRQUMxQixPQUFPO1lBQ0wsVUFBVSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQzlCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtZQUMxQixJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2xELEtBQUssRUFDSCxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUk7Z0JBQ2hCLENBQUMsQ0FBQyxTQUFTO2dCQUNYLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztvQkFDaEQsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLO2lCQUNiLENBQUMsQ0FBQztTQUNWLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUExQ0Qsa0ZBMENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERuc2NvbnRyb2xDZlNpbmdsZVJlZGlyZWN0UmF3UmVjb3JkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Ruc2NvbnRyb2wtcmF3LXJlY29yZC1jb25maWdcIjtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2R1cmF0aW9uXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sUmF3UmVjb3JkIH0gZnJvbSBcIi4uL3Jhdy1yZWNvcmQvZG5zY29udHJvbC1yYXctcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX0NGX1NJTkdMRV9SRURJUkVDVF9SQVdfUkVDT1JEX1NZTUJPTCA9IFN5bWJvbC5mb3IoXG4gIFwiRG5zY29udHJvbENmU2luZ2xlUmVkaXJlY3RSYXdSZWNvcmRcIixcbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuY29uc3QgcmVkaXJlY3RDb2RlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBSZWRpcmVjdENvZGUgPSAodHlwZW9mIHJlZGlyZWN0Q29kZXMpW251bWJlcl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5zY29udHJvbENmU2luZ2xlUmVkaXJlY3RSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcmVhZG9ubHkgY29kZTogUmVkaXJlY3RDb2RlO1xuICByZWFkb25seSB3aGVuOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRoZW46IHN0cmluZztcbiAgcmVhZG9ubHkgdHRsPzogRHVyYXRpb24gfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IG1ldGFzPzogUmVjb3JkPHN0cmluZywgc3RyaW5nIHwgbnVtYmVyPiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIERuc2NvbnRyb2xDZlNpbmdsZVJlZGlyZWN0UmF3UmVjb3JkIGV4dGVuZHMgRG5zY29udHJvbFJhd1JlY29yZCB7XG4gIHB1YmxpYyByZWFkb25seSBuYW1lOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBjb2RlOiBSZWRpcmVjdENvZGU7XG4gIHB1YmxpYyByZWFkb25seSB3aGVuOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSB0aGVuOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBwcm9wczogRG5zY29udHJvbENmU2luZ2xlUmVkaXJlY3RSZWNvcmRQcm9wcyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByYXdSZWNvcmRUeXBlOiBcIkNMT1VERkxBUkVBUElfU0lOR0xFX1JFRElSRUNUXCIsXG4gICAgICB0dGw6IHByb3BzLnR0bCxcbiAgICAgIG1ldGFzOiBwcm9wcy5tZXRhcyxcbiAgICB9KTtcbiAgICB0aGlzLm5hbWUgPSBwcm9wcy5uYW1lO1xuICAgIHRoaXMuY29kZSA9IHByb3BzLmNvZGU7XG4gICAgdGhpcy53aGVuID0gcHJvcHMud2hlbjtcbiAgICB0aGlzLnRoZW4gPSBwcm9wcy50aGVuO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgaXNEbnNjb250cm9sQ2ZTaW5nbGVSZWRpcmVjdFJlY29yZChcbiAgICB4OiB1bmtub3duLFxuICApOiB4IGlzIERuc2NvbnRyb2xDZlNpbmdsZVJlZGlyZWN0UmF3UmVjb3JkIHtcbiAgICByZXR1cm4gKFxuICAgICAgeCAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgRE5TX0NPTlRST0xfQ0ZfU0lOR0xFX1JFRElSRUNUX1JBV19SRUNPUkRfU1lNQk9MIGluIHhcbiAgICApO1xuICB9XG4gIHB1YmxpYyByZW5kZXJSYXdSZWNvcmRDb25maWcoKTogRG5zY29udHJvbENmU2luZ2xlUmVkaXJlY3RSYXdSZWNvcmRDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICByZWNvcmRUeXBlOiB0aGlzLnJhd1JlY29yZFR5cGUsXG4gICAgICB0dGw6IHRoaXMudHRsPy50b1NlY29uZHMoKSxcbiAgICAgIGFyZ3M6IFt0aGlzLm5hbWUsIHRoaXMuY29kZSwgdGhpcy53aGVuLCB0aGlzLnRoZW5dLFxuICAgICAgbWV0YXM6XG4gICAgICAgIHRoaXMubWV0YXMgPT0gbnVsbFxuICAgICAgICAgID8gdW5kZWZpbmVkXG4gICAgICAgICAgOiBPYmplY3QuZW50cmllcyh0aGlzLm1ldGFzKS5tYXAoKFtrZXksIHZhbHVlXSkgPT4gKHtcbiAgICAgICAgICAgICAgW2tleV06IHZhbHVlLFxuICAgICAgICAgICAgfSkpLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==