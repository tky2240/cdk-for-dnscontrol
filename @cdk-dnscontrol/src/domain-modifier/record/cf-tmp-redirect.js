"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolCfTmpRedirectRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_CF_TEMP_REDIRECT_RECORD_SYMBOL = Symbol.for("DnscontrolCfTmpRedirectRecord");
class DnscontrolCfTmpRedirectRecord extends dnscontrol_record_1.DnscontrolRecord {
    source;
    destination;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "CF_TEMP_REDIRECT",
            label: "@",
            target: `${props.source},${props.destination}`,
            ttl: props.ttl,
        });
        if (props.source.includes(",")) {
            throw new Error("source must include no commma");
        }
        if (props.destination.includes(",")) {
            throw new Error("destination must include no commma");
        }
        this.source = props.source;
        this.destination = props.destination;
    }
    static isDnscontrolCfTmpRedirectRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_CF_TEMP_REDIRECT_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            meta: {
                orig_custom_type: "CF_TEMP_REDIRECT",
            },
        };
    }
}
exports.DnscontrolCfTmpRedirectRecord = DnscontrolCfTmpRedirectRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2YtdG1wLXJlZGlyZWN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2YtdG1wLXJlZGlyZWN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJEQUF1RDtBQUV2RCxNQUFNLDBDQUEwQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQzNELCtCQUErQixDQUNoQyxDQUFDO0FBUUYsTUFBYSw2QkFBOEIsU0FBUSxvQ0FBZ0I7SUFDeEQsTUFBTSxDQUFTO0lBQ2YsV0FBVyxDQUFTO0lBQzdCLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQXlDO1FBRXpDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsVUFBVSxFQUFFLGtCQUFrQjtZQUM5QixLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLFdBQVcsRUFBRTtZQUM5QyxHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7U0FDZixDQUFDLENBQUM7UUFDSCxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFDRCxJQUFJLEtBQUssQ0FBQyxXQUFXLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDcEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQ0FBb0MsQ0FBQyxDQUFDO1FBQ3hELENBQUM7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxLQUFLLENBQUMsV0FBVyxDQUFDO0lBQ3ZDLENBQUM7SUFDTSxNQUFNLENBQUMsK0JBQStCLENBQzNDLENBQVU7UUFFVixPQUFPLENBQ0wsQ0FBQyxJQUFJLElBQUk7WUFDVCxPQUFPLENBQUMsS0FBSyxRQUFRO1lBQ3JCLDBDQUEwQyxJQUFJLENBQUMsQ0FDaEQsQ0FBQztJQUNKLENBQUM7SUFDTSxrQkFBa0I7UUFDdkIsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQzFCLElBQUksRUFBRTtnQkFDSixnQkFBZ0IsRUFBRSxrQkFBa0I7YUFDckM7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBM0NELHNFQTJDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sQ2ZUbXBSZWRpcmVjdFJlY29yZENvbmZpZyB9IGZyb20gXCIuLi8uLi90eXBlcy9kbnNjb250cm9sLXJlY29yZC1jb25maWdcIjtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2R1cmF0aW9uXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sUmVjb3JkIH0gZnJvbSBcIi4vZG5zY29udHJvbC1yZWNvcmRcIjtcblxuY29uc3QgRE5TX0NPTlRST0xfQ0ZfVEVNUF9SRURJUkVDVF9SRUNPUkRfU1lNQk9MID0gU3ltYm9sLmZvcihcbiAgXCJEbnNjb250cm9sQ2ZUbXBSZWRpcmVjdFJlY29yZFwiLFxuKTtcblxuZXhwb3J0IGludGVyZmFjZSBEbnNjb250cm9sQ2ZUbXBSZWRpcmVjdFJlY29yZFByb3BzIHtcbiAgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlc3RpbmF0aW9uOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY2xhc3MgRG5zY29udHJvbENmVG1wUmVkaXJlY3RSZWNvcmQgZXh0ZW5kcyBEbnNjb250cm9sUmVjb3JkIHtcbiAgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlc3RpbmF0aW9uOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBwcm9wczogRG5zY29udHJvbENmVG1wUmVkaXJlY3RSZWNvcmRQcm9wcyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIkNGX1RFTVBfUkVESVJFQ1RcIixcbiAgICAgIGxhYmVsOiBcIkBcIixcbiAgICAgIHRhcmdldDogYCR7cHJvcHMuc291cmNlfSwke3Byb3BzLmRlc3RpbmF0aW9ufWAsXG4gICAgICB0dGw6IHByb3BzLnR0bCxcbiAgICB9KTtcbiAgICBpZiAocHJvcHMuc291cmNlLmluY2x1ZGVzKFwiLFwiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic291cmNlIG11c3QgaW5jbHVkZSBubyBjb21tbWFcIik7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kZXN0aW5hdGlvbi5pbmNsdWRlcyhcIixcIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRlc3RpbmF0aW9uIG11c3QgaW5jbHVkZSBubyBjb21tbWFcIik7XG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gcHJvcHMuc291cmNlO1xuICAgIHRoaXMuZGVzdGluYXRpb24gPSBwcm9wcy5kZXN0aW5hdGlvbjtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzRG5zY29udHJvbENmVG1wUmVkaXJlY3RSZWNvcmQoXG4gICAgeDogdW5rbm93bixcbiAgKTogeCBpcyBEbnNjb250cm9sQ2ZUbXBSZWRpcmVjdFJlY29yZCB7XG4gICAgcmV0dXJuIChcbiAgICAgIHggIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIEROU19DT05UUk9MX0NGX1RFTVBfUkVESVJFQ1RfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xDZlRtcFJlZGlyZWN0UmVjb3JkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCxcbiAgICAgIHJlY29yZFR5cGU6IHRoaXMucmVjb3JkVHlwZSxcbiAgICAgIHR0bDogdGhpcy50dGw/LnRvU2Vjb25kcygpLFxuICAgICAgbWV0YToge1xuICAgICAgICBvcmlnX2N1c3RvbV90eXBlOiBcIkNGX1RFTVBfUkVESVJFQ1RcIixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl19