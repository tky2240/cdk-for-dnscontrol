"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolAzureAliasRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_AZURE_ALIAS_RECORD_SYMBOL = Symbol.for("DnscontrolAzureAliasRecord");
// eslint-disable-next-line
const azureAliasTypeString = ["A", "AAAA", "CNAME"];
class DnscontrolAzureAliasRecord extends dnscontrol_record_1.DnscontrolRecord {
    azureAliasType;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "AZURE_ALIAS",
            label: props.label,
            target: props.target,
            ttl: props.ttl,
        });
        this.azureAliasType = props.azureAliasType;
    }
    static isDnscontrolAzureAliasRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_AZURE_ALIAS_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            azureAlias: {
                type: this.azureAliasType,
            },
            meta: {
                orig_custom_type: "AZURE_ALIAS",
            },
        };
    }
}
exports.DnscontrolAzureAliasRecord = DnscontrolAzureAliasRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXp1cmUtYWxpYXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJhenVyZS1hbGlhcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwyREFBdUQ7QUFFdkQsTUFBTSxxQ0FBcUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUN0RCw0QkFBNEIsQ0FDN0IsQ0FBQztBQUVGLDJCQUEyQjtBQUMzQixNQUFNLG9CQUFvQixHQUFHLENBQUMsR0FBRyxFQUFFLE1BQU0sRUFBRSxPQUFPLENBQVUsQ0FBQztBQVc3RCxNQUFhLDBCQUEyQixTQUFRLG9DQUFnQjtJQUNyRCxjQUFjLENBQWlCO0lBQ3hDLFlBQ0UsS0FBZ0IsRUFDaEIsRUFBVSxFQUNWLEtBQXNDO1FBRXRDLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsVUFBVSxFQUFFLGFBQWE7WUFDekIsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ2xCLE1BQU0sRUFBRSxLQUFLLENBQUMsTUFBTTtZQUNwQixHQUFHLEVBQUUsS0FBSyxDQUFDLEdBQUc7U0FDZixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxjQUFjLENBQUM7SUFDN0MsQ0FBQztJQUNNLE1BQU0sQ0FBQyw0QkFBNEIsQ0FDeEMsQ0FBVTtRQUVWLE9BQU8sQ0FDTCxDQUFDLElBQUksSUFBSTtZQUNULE9BQU8sQ0FBQyxLQUFLLFFBQVE7WUFDckIscUNBQXFDLElBQUksQ0FBQyxDQUMzQyxDQUFDO0lBQ0osQ0FBQztJQUNNLGtCQUFrQjtRQUN2QixPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7WUFDMUIsVUFBVSxFQUFFO2dCQUNWLElBQUksRUFBRSxJQUFJLENBQUMsY0FBYzthQUMxQjtZQUNELElBQUksRUFBRTtnQkFDSixnQkFBZ0IsRUFBRSxhQUFhO2FBQ2hDO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXRDRCxnRUFzQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRG5zY29udHJvbEF6dXJlQWxpYXNSZWNvcmRDb25maWcgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtY29uZmlnXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy9kdXJhdGlvblwiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZCB9IGZyb20gXCIuL2Ruc2NvbnRyb2wtcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX0FaVVJFX0FMSUFTX1JFQ09SRF9TWU1CT0wgPSBTeW1ib2wuZm9yKFxuICBcIkRuc2NvbnRyb2xBenVyZUFsaWFzUmVjb3JkXCIsXG4pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmNvbnN0IGF6dXJlQWxpYXNUeXBlU3RyaW5nID0gW1wiQVwiLCBcIkFBQUFcIiwgXCJDTkFNRVwiXSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgQXp1cmVBbGlhc1R5cGUgPSAodHlwZW9mIGF6dXJlQWxpYXNUeXBlU3RyaW5nKVtudW1iZXJdO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuc2NvbnRyb2xBenVyZUFsaWFzUmVjb3JkUHJvcHMge1xuICByZWFkb25seSBsYWJlbDogc3RyaW5nO1xuICByZWFkb25seSB0YXJnZXQ6IHN0cmluZztcbiAgcmVhZG9ubHkgYXp1cmVBbGlhc1R5cGU6IEF6dXJlQWxpYXNUeXBlO1xuICByZWFkb25seSB0dGw/OiBEdXJhdGlvbiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIERuc2NvbnRyb2xBenVyZUFsaWFzUmVjb3JkIGV4dGVuZHMgRG5zY29udHJvbFJlY29yZCB7XG4gIHJlYWRvbmx5IGF6dXJlQWxpYXNUeXBlOiBBenVyZUFsaWFzVHlwZTtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByb3BzOiBEbnNjb250cm9sQXp1cmVBbGlhc1JlY29yZFByb3BzLFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHJlY29yZFR5cGU6IFwiQVpVUkVfQUxJQVNcIixcbiAgICAgIGxhYmVsOiBwcm9wcy5sYWJlbCxcbiAgICAgIHRhcmdldDogcHJvcHMudGFyZ2V0LFxuICAgICAgdHRsOiBwcm9wcy50dGwsXG4gICAgfSk7XG4gICAgdGhpcy5henVyZUFsaWFzVHlwZSA9IHByb3BzLmF6dXJlQWxpYXNUeXBlO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgaXNEbnNjb250cm9sQXp1cmVBbGlhc1JlY29yZChcbiAgICB4OiB1bmtub3duLFxuICApOiB4IGlzIERuc2NvbnRyb2xBenVyZUFsaWFzUmVjb3JkIHtcbiAgICByZXR1cm4gKFxuICAgICAgeCAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgRE5TX0NPTlRST0xfQVpVUkVfQUxJQVNfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xBenVyZUFsaWFzUmVjb3JkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCxcbiAgICAgIHJlY29yZFR5cGU6IHRoaXMucmVjb3JkVHlwZSxcbiAgICAgIHR0bDogdGhpcy50dGw/LnRvU2Vjb25kcygpLFxuICAgICAgYXp1cmVBbGlhczoge1xuICAgICAgICB0eXBlOiB0aGlzLmF6dXJlQWxpYXNUeXBlLFxuICAgICAgfSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgb3JpZ19jdXN0b21fdHlwZTogXCJBWlVSRV9BTElBU1wiLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG4iXX0=