"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolNaptrRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_NAPTR_RECORD_SYMBOL = Symbol.for("DnscontrolNaptrRecord");
class DnscontrolNaptrRecord extends dnscontrol_record_1.DnscontrolRecord {
    order;
    preference;
    flags;
    service;
    regexp;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "NAPTR",
            label: props.label,
            target: props.target,
            ttl: props.ttl,
            isEnsuredAbsent: props.isEnsuredAbsent,
            meta: props.meta,
        });
        this.order = props.order;
        this.preference = props.preference;
        this.flags = props.flags;
        this.service = props.service;
        this.regexp = props.regexp;
    }
    static isDnscontrolNaptrRecord(x) {
        return (x != null && typeof x === "object" && DNS_CONTROL_NAPTR_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            naptrOrder: this.order,
            naptrPreference: this.preference,
            naptrFlags: this.flags,
            naptrService: this.service,
            naptrRegexp: this.regexp,
            meta: this.meta,
        };
    }
}
exports.DnscontrolNaptrRecord = DnscontrolNaptrRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFwdHIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuYXB0ci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwyREFBdUQ7QUFFdkQsTUFBTSwrQkFBK0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFlNUUsTUFBYSxxQkFBc0IsU0FBUSxvQ0FBZ0I7SUFDekMsS0FBSyxDQUFTO0lBQ2QsVUFBVSxDQUFTO0lBQ25CLEtBQUssQ0FBUztJQUNkLE9BQU8sQ0FBUztJQUNoQixNQUFNLENBQVM7SUFDL0IsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQztRQUN6RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFVBQVUsRUFBRSxPQUFPO1lBQ25CLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFDTSxNQUFNLENBQUMsdUJBQXVCLENBQ25DLENBQVU7UUFFVixPQUFPLENBQ0wsQ0FBQyxJQUFJLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksK0JBQStCLElBQUksQ0FBQyxDQUMzRSxDQUFDO0lBQ0osQ0FBQztJQUNNLGtCQUFrQjtRQUN2QixPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7WUFDMUIsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3RCLGVBQWUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUNoQyxVQUFVLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDdEIsWUFBWSxFQUFFLElBQUksQ0FBQyxPQUFPO1lBQzFCLFdBQVcsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUN4QixJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDaEIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTFDRCxzREEwQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRG5zY29udHJvbE5hcHRyUmVjb3JkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Ruc2NvbnRyb2wtcmVjb3JkLWNvbmZpZ1wiO1xuaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tIFwiLi4vLi4vdHlwZXMvZHVyYXRpb25cIjtcbmltcG9ydCB7IERuc2NvbnRyb2xSZWNvcmQgfSBmcm9tIFwiLi9kbnNjb250cm9sLXJlY29yZFwiO1xuXG5jb25zdCBETlNfQ09OVFJPTF9OQVBUUl9SRUNPUkRfU1lNQk9MID0gU3ltYm9sLmZvcihcIkRuc2NvbnRyb2xOYXB0clJlY29yZFwiKTtcblxuZXhwb3J0IGludGVyZmFjZSBEbnNjb250cm9sTmFwdHJSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRhcmdldDogc3RyaW5nO1xuICByZWFkb25seSBvcmRlcjogbnVtYmVyO1xuICByZWFkb25seSBwcmVmZXJlbmNlOiBudW1iZXI7XG4gIHJlYWRvbmx5IGZsYWdzOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHNlcnZpY2U6IHN0cmluZztcbiAgcmVhZG9ubHkgcmVnZXhwOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBpc0Vuc3VyZWRBYnNlbnQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBtZXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIERuc2NvbnRyb2xOYXB0clJlY29yZCBleHRlbmRzIERuc2NvbnRyb2xSZWNvcmQge1xuICBwdWJsaWMgcmVhZG9ubHkgb3JkZXI6IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHByZWZlcmVuY2U6IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IGZsYWdzOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBzZXJ2aWNlOiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSByZWdleHA6IHN0cmluZztcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERuc2NvbnRyb2xOYXB0clJlY29yZFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIk5BUFRSXCIsXG4gICAgICBsYWJlbDogcHJvcHMubGFiZWwsXG4gICAgICB0YXJnZXQ6IHByb3BzLnRhcmdldCxcbiAgICAgIHR0bDogcHJvcHMudHRsLFxuICAgICAgaXNFbnN1cmVkQWJzZW50OiBwcm9wcy5pc0Vuc3VyZWRBYnNlbnQsXG4gICAgICBtZXRhOiBwcm9wcy5tZXRhLFxuICAgIH0pO1xuICAgIHRoaXMub3JkZXIgPSBwcm9wcy5vcmRlcjtcbiAgICB0aGlzLnByZWZlcmVuY2UgPSBwcm9wcy5wcmVmZXJlbmNlO1xuICAgIHRoaXMuZmxhZ3MgPSBwcm9wcy5mbGFncztcbiAgICB0aGlzLnNlcnZpY2UgPSBwcm9wcy5zZXJ2aWNlO1xuICAgIHRoaXMucmVnZXhwID0gcHJvcHMucmVnZXhwO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgaXNEbnNjb250cm9sTmFwdHJSZWNvcmQoXG4gICAgeDogdW5rbm93bixcbiAgKTogeCBpcyBEbnNjb250cm9sTmFwdHJSZWNvcmQge1xuICAgIHJldHVybiAoXG4gICAgICB4ICE9IG51bGwgJiYgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgRE5TX0NPTlRST0xfTkFQVFJfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xOYXB0clJlY29yZENvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHRhcmdldDogdGhpcy50YXJnZXQsXG4gICAgICByZWNvcmRUeXBlOiB0aGlzLnJlY29yZFR5cGUsXG4gICAgICB0dGw6IHRoaXMudHRsPy50b1NlY29uZHMoKSxcbiAgICAgIG5hcHRyT3JkZXI6IHRoaXMub3JkZXIsXG4gICAgICBuYXB0clByZWZlcmVuY2U6IHRoaXMucHJlZmVyZW5jZSxcbiAgICAgIG5hcHRyRmxhZ3M6IHRoaXMuZmxhZ3MsXG4gICAgICBuYXB0clNlcnZpY2U6IHRoaXMuc2VydmljZSxcbiAgICAgIG5hcHRyUmVnZXhwOiB0aGlzLnJlZ2V4cCxcbiAgICAgIG1ldGE6IHRoaXMubWV0YSxcbiAgICB9O1xuICB9XG59XG4iXX0=