"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolNaptrRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_NAPTR_RECORD_SYMBOL = Symbol.for("DnscontrolNaptrRecord");
class DnscontrolNaptrRecord extends dnscontrol_record_1.DnscontrolRecord {
    order;
    preference;
    flags;
    service;
    regexp;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "NAPTR",
            label: props.label,
            target: props.target,
            ttl: props.ttl,
        });
        this.order = props.order;
        this.preference = props.preference;
        this.flags = props.flags;
        this.service = props.service;
        this.regexp = props.regexp;
    }
    static isDnscontrolNaptrRecord(x) {
        return (x != null && typeof x === "object" && DNS_CONTROL_NAPTR_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            naptrOrder: this.order,
            naptrPreference: this.preference,
            naptrFlags: this.flags,
            naptrService: this.service,
            naptrRegexp: this.regexp,
            meta: {},
        };
    }
}
exports.DnscontrolNaptrRecord = DnscontrolNaptrRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmFwdHIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJuYXB0ci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwyREFBdUQ7QUFFdkQsTUFBTSwrQkFBK0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFhNUUsTUFBYSxxQkFBc0IsU0FBUSxvQ0FBZ0I7SUFDekMsS0FBSyxDQUFTO0lBQ2QsVUFBVSxDQUFTO0lBQ25CLEtBQUssQ0FBUztJQUNkLE9BQU8sQ0FBUztJQUNoQixNQUFNLENBQVM7SUFDL0IsWUFBWSxLQUFnQixFQUFFLEVBQVUsRUFBRSxLQUFpQztRQUN6RSxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFVBQVUsRUFBRSxPQUFPO1lBQ25CLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSztZQUNsQixNQUFNLEVBQUUsS0FBSyxDQUFDLE1BQU07WUFDcEIsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1NBQ2YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO1FBQ3pCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBQ00sTUFBTSxDQUFDLHVCQUF1QixDQUNuQyxDQUFVO1FBRVYsT0FBTyxDQUNMLENBQUMsSUFBSSxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLCtCQUErQixJQUFJLENBQUMsQ0FDM0UsQ0FBQztJQUNKLENBQUM7SUFDTSxrQkFBa0I7UUFDdkIsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQzFCLFVBQVUsRUFBRSxJQUFJLENBQUMsS0FBSztZQUN0QixlQUFlLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDaEMsVUFBVSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3RCLFlBQVksRUFBRSxJQUFJLENBQUMsT0FBTztZQUMxQixXQUFXLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDeEIsSUFBSSxFQUFFLEVBQUU7U0FDVCxDQUFDO0lBQ0osQ0FBQztDQUNGO0FBeENELHNEQXdDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sTmFwdHJSZWNvcmRDb25maWcgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtY29uZmlnXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy9kdXJhdGlvblwiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZCB9IGZyb20gXCIuL2Ruc2NvbnRyb2wtcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX05BUFRSX1JFQ09SRF9TWU1CT0wgPSBTeW1ib2wuZm9yKFwiRG5zY29udHJvbE5hcHRyUmVjb3JkXCIpO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuc2NvbnRyb2xOYXB0clJlY29yZFByb3BzIHtcbiAgcmVhZG9ubHkgbGFiZWw6IHN0cmluZztcbiAgcmVhZG9ubHkgdGFyZ2V0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IG9yZGVyOiBudW1iZXI7XG4gIHJlYWRvbmx5IHByZWZlcmVuY2U6IG51bWJlcjtcbiAgcmVhZG9ubHkgZmxhZ3M6IHN0cmluZztcbiAgcmVhZG9ubHkgc2VydmljZTogc3RyaW5nO1xuICByZWFkb25seSByZWdleHA6IHN0cmluZztcbiAgcmVhZG9ubHkgdHRsPzogRHVyYXRpb24gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEbnNjb250cm9sTmFwdHJSZWNvcmQgZXh0ZW5kcyBEbnNjb250cm9sUmVjb3JkIHtcbiAgcHVibGljIHJlYWRvbmx5IG9yZGVyOiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSBwcmVmZXJlbmNlOiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSBmbGFnczogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgc2VydmljZTogc3RyaW5nO1xuICBwdWJsaWMgcmVhZG9ubHkgcmVnZXhwOiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEbnNjb250cm9sTmFwdHJSZWNvcmRQcm9wcykge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgcmVjb3JkVHlwZTogXCJOQVBUUlwiLFxuICAgICAgbGFiZWw6IHByb3BzLmxhYmVsLFxuICAgICAgdGFyZ2V0OiBwcm9wcy50YXJnZXQsXG4gICAgICB0dGw6IHByb3BzLnR0bCxcbiAgICB9KTtcbiAgICB0aGlzLm9yZGVyID0gcHJvcHMub3JkZXI7XG4gICAgdGhpcy5wcmVmZXJlbmNlID0gcHJvcHMucHJlZmVyZW5jZTtcbiAgICB0aGlzLmZsYWdzID0gcHJvcHMuZmxhZ3M7XG4gICAgdGhpcy5zZXJ2aWNlID0gcHJvcHMuc2VydmljZTtcbiAgICB0aGlzLnJlZ2V4cCA9IHByb3BzLnJlZ2V4cDtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzRG5zY29udHJvbE5hcHRyUmVjb3JkKFxuICAgIHg6IHVua25vd24sXG4gICk6IHggaXMgRG5zY29udHJvbE5hcHRyUmVjb3JkIHtcbiAgICByZXR1cm4gKFxuICAgICAgeCAhPSBudWxsICYmIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmIEROU19DT05UUk9MX05BUFRSX1JFQ09SRF9TWU1CT0wgaW4geFxuICAgICk7XG4gIH1cbiAgcHVibGljIHJlbmRlclJlY29yZENvbmZpZygpOiBEbnNjb250cm9sTmFwdHJSZWNvcmRDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0LFxuICAgICAgcmVjb3JkVHlwZTogdGhpcy5yZWNvcmRUeXBlLFxuICAgICAgdHRsOiB0aGlzLnR0bD8udG9TZWNvbmRzKCksXG4gICAgICBuYXB0ck9yZGVyOiB0aGlzLm9yZGVyLFxuICAgICAgbmFwdHJQcmVmZXJlbmNlOiB0aGlzLnByZWZlcmVuY2UsXG4gICAgICBuYXB0ckZsYWdzOiB0aGlzLmZsYWdzLFxuICAgICAgbmFwdHJTZXJ2aWNlOiB0aGlzLnNlcnZpY2UsXG4gICAgICBuYXB0clJlZ2V4cDogdGhpcy5yZWdleHAsXG4gICAgICBtZXRhOiB7fSxcbiAgICB9O1xuICB9XG59XG4iXX0=