"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolRecord = void 0;
const dnscontrol_domain_modifier_1 = require("../dnscontrol-domain-modifier");
const DNS_CONTROL_RECORD_SYMBOL = Symbol.for("DnscontrolRecord");
class DnscontrolRecord extends dnscontrol_domain_modifier_1.DnscontrolDomainModifier {
    recordType;
    label;
    subDomain;
    name;
    ttl;
    target;
    isEnsuredAbsent;
    meta;
    constructor(scope, id, props) {
        super(scope, id, {
            modiferType: props.recordType,
        });
        Object.defineProperty(this, DNS_CONTROL_RECORD_SYMBOL, { value: true });
        this.recordType = props.recordType;
        this.label = props.label;
        this.subDomain = props.subDomain;
        this.ttl = props.ttl;
        this.target = props.target;
        this.name = props.label;
        this.isEnsuredAbsent = props.isEnsuredAbsent;
        this.meta = props.meta;
    }
    static isDnscontrolRecord(x) {
        return x != null && typeof x === "object" && DNS_CONTROL_RECORD_SYMBOL in x;
    }
}
exports.DnscontrolRecord = DnscontrolRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5zY29udHJvbC1yZWNvcmQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJkbnNjb250cm9sLXJlY29yZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFJQSw4RUFBeUU7QUFFekUsTUFBTSx5QkFBeUIsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFZakUsTUFBc0IsZ0JBQWlCLFNBQVEscURBQXdCO0lBQ3JELFVBQVUsQ0FBdUI7SUFDakMsS0FBSyxDQUFTO0lBQ2QsU0FBUyxDQUFzQjtJQUMvQixJQUFJLENBQVM7SUFDYixHQUFHLENBQXdCO0lBQzNCLE1BQU0sQ0FBUztJQUNmLGVBQWUsQ0FBdUI7SUFDdEMsSUFBSSxDQUFzQztJQUMxRCxZQUFZLEtBQWdCLEVBQUUsRUFBVSxFQUFFLEtBQTRCO1FBQ3BFLEtBQUssQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO1lBQ2YsV0FBVyxFQUFFLEtBQUssQ0FBQyxVQUFVO1NBQzlCLENBQUMsQ0FBQztRQUNILE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLHlCQUF5QixFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7UUFDeEUsSUFBSSxDQUFDLFVBQVUsR0FBRyxLQUFLLENBQUMsVUFBVSxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsSUFBSSxDQUFDLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDeEIsSUFBSSxDQUFDLGVBQWUsR0FBRyxLQUFLLENBQUMsZUFBZSxDQUFDO1FBQzdDLElBQUksQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztJQUN6QixDQUFDO0lBQ00sTUFBTSxDQUFDLGtCQUFrQixDQUFDLENBQVU7UUFDekMsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSx5QkFBeUIsSUFBSSxDQUFDLENBQUM7SUFDOUUsQ0FBQztDQUVGO0FBM0JELDRDQTJCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sUmVjb3JkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Ruc2NvbnRyb2wtcmVjb3JkLWNvbmZpZ1wiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZFR5cGUgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtdHlwZXNcIjtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2R1cmF0aW9uXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sRG9tYWluTW9kaWZpZXIgfSBmcm9tIFwiLi4vZG5zY29udHJvbC1kb21haW4tbW9kaWZpZXJcIjtcblxuY29uc3QgRE5TX0NPTlRST0xfUkVDT1JEX1NZTUJPTCA9IFN5bWJvbC5mb3IoXCJEbnNjb250cm9sUmVjb3JkXCIpO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuc2NvbnRyb2xSZWNvcmRQcm9wcyB7XG4gIHJlY29yZFR5cGU6IERuc2NvbnRyb2xSZWNvcmRUeXBlO1xuICBsYWJlbDogc3RyaW5nO1xuICBzdWJEb21haW4/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xuICB0YXJnZXQ6IHN0cmluZztcbiAgaXNFbnN1cmVkQWJzZW50PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgbWV0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBEbnNjb250cm9sUmVjb3JkIGV4dGVuZHMgRG5zY29udHJvbERvbWFpbk1vZGlmaWVyIHtcbiAgcHVibGljIHJlYWRvbmx5IHJlY29yZFR5cGU6IERuc2NvbnRyb2xSZWNvcmRUeXBlO1xuICBwdWJsaWMgcmVhZG9ubHkgbGFiZWw6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHN1YkRvbWFpbj86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgcHVibGljIHJlYWRvbmx5IG5hbWU6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0OiBzdHJpbmc7XG4gIHB1YmxpYyByZWFkb25seSBpc0Vuc3VyZWRBYnNlbnQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICBwdWJsaWMgcmVhZG9ubHkgbWV0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQ7XG4gIGNvbnN0cnVjdG9yKHNjb3BlOiBDb25zdHJ1Y3QsIGlkOiBzdHJpbmcsIHByb3BzOiBEbnNjb250cm9sUmVjb3JkUHJvcHMpIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIG1vZGlmZXJUeXBlOiBwcm9wcy5yZWNvcmRUeXBlLFxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBETlNfQ09OVFJPTF9SRUNPUkRfU1lNQk9MLCB7IHZhbHVlOiB0cnVlIH0pO1xuICAgIHRoaXMucmVjb3JkVHlwZSA9IHByb3BzLnJlY29yZFR5cGU7XG4gICAgdGhpcy5sYWJlbCA9IHByb3BzLmxhYmVsO1xuICAgIHRoaXMuc3ViRG9tYWluID0gcHJvcHMuc3ViRG9tYWluO1xuICAgIHRoaXMudHRsID0gcHJvcHMudHRsO1xuICAgIHRoaXMudGFyZ2V0ID0gcHJvcHMudGFyZ2V0O1xuICAgIHRoaXMubmFtZSA9IHByb3BzLmxhYmVsO1xuICAgIHRoaXMuaXNFbnN1cmVkQWJzZW50ID0gcHJvcHMuaXNFbnN1cmVkQWJzZW50O1xuICAgIHRoaXMubWV0YSA9IHByb3BzLm1ldGE7XG4gIH1cbiAgcHVibGljIHN0YXRpYyBpc0Ruc2NvbnRyb2xSZWNvcmQoeDogdW5rbm93bik6IHggaXMgRG5zY29udHJvbFJlY29yZCB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJiBETlNfQ09OVFJPTF9SRUNPUkRfU1lNQk9MIGluIHg7XG4gIH1cbiAgcHVibGljIGFic3RyYWN0IHJlbmRlclJlY29yZENvbmZpZygpOiBEbnNjb250cm9sUmVjb3JkQ29uZmlnO1xufVxuIl19