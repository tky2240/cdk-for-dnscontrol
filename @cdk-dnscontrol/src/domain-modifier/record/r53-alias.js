"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolR53AliasRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_R53_ALIAS_RECORD_SYMBOL = Symbol.for("DnscontrolR53AliasRecord");
// eslint-disable-next-line
const r53AliasTypeString = [
    "A",
    "AAAA",
    "CNAME",
    "CAA",
    "MX",
    "TXT",
    "PTR",
    "SPF",
    "SRV",
    "NAPTR",
];
class DnscontrolR53AliasRecord extends dnscontrol_record_1.DnscontrolRecord {
    r53AliasType;
    zoneId;
    isEnabledEvaluateTargetHealth;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "R53_ALIAS",
            label: props.label,
            target: props.target,
            ttl: props.ttl,
        });
        this.r53AliasType = props.r53AliasType;
        this.zoneId = props.zoneId;
        this.isEnabledEvaluateTargetHealth = props.isEnabledEvaluateTargetHealth;
    }
    static isDnscontrolR53AliasRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_R53_ALIAS_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        // missing Boolean.prototype.toString() method
        // https://github.com/microsoft/TypeScript/issues/38347
        const evaluateTargetHealth = (() => {
            if (this.isEnabledEvaluateTargetHealth == null) {
                return "false";
            }
            return this.isEnabledEvaluateTargetHealth ? "true" : "false";
        })();
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            r53Alias: {
                type: this.r53AliasType,
                zoneId: this.zoneId,
                evaluateTargetHealth: evaluateTargetHealth,
            },
            meta: {
                orig_custom_type: "R53_ALIAS",
            },
        };
    }
}
exports.DnscontrolR53AliasRecord = DnscontrolR53AliasRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicjUzLWFsaWFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicjUzLWFsaWFzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJEQUF1RDtBQUV2RCxNQUFNLG1DQUFtQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQ3BELDBCQUEwQixDQUMzQixDQUFDO0FBRUYsMkJBQTJCO0FBQzNCLE1BQU0sa0JBQWtCLEdBQUc7SUFDekIsR0FBRztJQUNILE1BQU07SUFDTixPQUFPO0lBQ1AsS0FBSztJQUNMLElBQUk7SUFDSixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsT0FBTztDQUNDLENBQUM7QUFhWCxNQUFhLHdCQUF5QixTQUFRLG9DQUFnQjtJQUNuRCxZQUFZLENBQWU7SUFDM0IsTUFBTSxDQUFzQjtJQUM1Qiw2QkFBNkIsQ0FBdUI7SUFDN0QsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBb0M7UUFFcEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixVQUFVLEVBQUUsV0FBVztZQUN2QixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztTQUNmLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN2QyxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUM7UUFDM0IsSUFBSSxDQUFDLDZCQUE2QixHQUFHLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQztJQUMzRSxDQUFDO0lBQ00sTUFBTSxDQUFDLDBCQUEwQixDQUN0QyxDQUFVO1FBRVYsT0FBTyxDQUNMLENBQUMsSUFBSSxJQUFJO1lBQ1QsT0FBTyxDQUFDLEtBQUssUUFBUTtZQUNyQixtQ0FBbUMsSUFBSSxDQUFDLENBQ3pDLENBQUM7SUFDSixDQUFDO0lBQ00sa0JBQWtCO1FBQ3ZCLDhDQUE4QztRQUM5Qyx1REFBdUQ7UUFDdkQsTUFBTSxvQkFBb0IsR0FBRyxDQUFDLEdBQUcsRUFBRTtZQUNqQyxJQUFJLElBQUksQ0FBQyw2QkFBNkIsSUFBSSxJQUFJLEVBQUUsQ0FBQztnQkFDL0MsT0FBTyxPQUFPLENBQUM7WUFDakIsQ0FBQztZQUNELE9BQU8sSUFBSSxDQUFDLDZCQUE2QixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztRQUMvRCxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ0wsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQzFCLFFBQVEsRUFBRTtnQkFDUixJQUFJLEVBQUUsSUFBSSxDQUFDLFlBQVk7Z0JBQ3ZCLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtnQkFDbkIsb0JBQW9CLEVBQUUsb0JBQW9CO2FBQzNDO1lBQ0QsSUFBSSxFQUFFO2dCQUNKLGdCQUFnQixFQUFFLFdBQVc7YUFDOUI7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBcERELDREQW9EQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sUjUzQWxpYXNSZWNvcmRDb25maWcgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtY29uZmlnXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy9kdXJhdGlvblwiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZCB9IGZyb20gXCIuL2Ruc2NvbnRyb2wtcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX1I1M19BTElBU19SRUNPUkRfU1lNQk9MID0gU3ltYm9sLmZvcihcbiAgXCJEbnNjb250cm9sUjUzQWxpYXNSZWNvcmRcIixcbik7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuY29uc3QgcjUzQWxpYXNUeXBlU3RyaW5nID0gW1xuICBcIkFcIixcbiAgXCJBQUFBXCIsXG4gIFwiQ05BTUVcIixcbiAgXCJDQUFcIixcbiAgXCJNWFwiLFxuICBcIlRYVFwiLFxuICBcIlBUUlwiLFxuICBcIlNQRlwiLFxuICBcIlNSVlwiLFxuICBcIk5BUFRSXCIsXG5dIGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBSNTNBbGlhc1R5cGUgPSAodHlwZW9mIHI1M0FsaWFzVHlwZVN0cmluZylbbnVtYmVyXTtcblxuZXhwb3J0IGludGVyZmFjZSBEbnNjb250cm9sUjUzQWxpYXNSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHRhcmdldDogc3RyaW5nO1xuICByZWFkb25seSByNTNBbGlhc1R5cGU6IFI1M0FsaWFzVHlwZTtcbiAgcmVhZG9ubHkgem9uZUlkPzogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBpc0VuYWJsZWRFdmFsdWF0ZVRhcmdldEhlYWx0aD86IGJvb2xlYW4gfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgY2xhc3MgRG5zY29udHJvbFI1M0FsaWFzUmVjb3JkIGV4dGVuZHMgRG5zY29udHJvbFJlY29yZCB7XG4gIHJlYWRvbmx5IHI1M0FsaWFzVHlwZTogUjUzQWxpYXNUeXBlO1xuICByZWFkb25seSB6b25lSWQ/OiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gIHJlYWRvbmx5IGlzRW5hYmxlZEV2YWx1YXRlVGFyZ2V0SGVhbHRoPzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByb3BzOiBEbnNjb250cm9sUjUzQWxpYXNSZWNvcmRQcm9wcyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIlI1M19BTElBU1wiLFxuICAgICAgbGFiZWw6IHByb3BzLmxhYmVsLFxuICAgICAgdGFyZ2V0OiBwcm9wcy50YXJnZXQsXG4gICAgICB0dGw6IHByb3BzLnR0bCxcbiAgICB9KTtcbiAgICB0aGlzLnI1M0FsaWFzVHlwZSA9IHByb3BzLnI1M0FsaWFzVHlwZTtcbiAgICB0aGlzLnpvbmVJZCA9IHByb3BzLnpvbmVJZDtcbiAgICB0aGlzLmlzRW5hYmxlZEV2YWx1YXRlVGFyZ2V0SGVhbHRoID0gcHJvcHMuaXNFbmFibGVkRXZhbHVhdGVUYXJnZXRIZWFsdGg7XG4gIH1cbiAgcHVibGljIHN0YXRpYyBpc0Ruc2NvbnRyb2xSNTNBbGlhc1JlY29yZChcbiAgICB4OiB1bmtub3duLFxuICApOiB4IGlzIERuc2NvbnRyb2xSNTNBbGlhc1JlY29yZCB7XG4gICAgcmV0dXJuIChcbiAgICAgIHggIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIEROU19DT05UUk9MX1I1M19BTElBU19SRUNPUkRfU1lNQk9MIGluIHhcbiAgICApO1xuICB9XG4gIHB1YmxpYyByZW5kZXJSZWNvcmRDb25maWcoKTogRG5zY29udHJvbFI1M0FsaWFzUmVjb3JkQ29uZmlnIHtcbiAgICAvLyBtaXNzaW5nIEJvb2xlYW4ucHJvdG90eXBlLnRvU3RyaW5nKCkgbWV0aG9kXG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8zODM0N1xuICAgIGNvbnN0IGV2YWx1YXRlVGFyZ2V0SGVhbHRoID0gKCgpID0+IHtcbiAgICAgIGlmICh0aGlzLmlzRW5hYmxlZEV2YWx1YXRlVGFyZ2V0SGVhbHRoID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIFwiZmFsc2VcIjtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmlzRW5hYmxlZEV2YWx1YXRlVGFyZ2V0SGVhbHRoID8gXCJ0cnVlXCIgOiBcImZhbHNlXCI7XG4gICAgfSkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCxcbiAgICAgIHJlY29yZFR5cGU6IHRoaXMucmVjb3JkVHlwZSxcbiAgICAgIHR0bDogdGhpcy50dGw/LnRvU2Vjb25kcygpLFxuICAgICAgcjUzQWxpYXM6IHtcbiAgICAgICAgdHlwZTogdGhpcy5yNTNBbGlhc1R5cGUsXG4gICAgICAgIHpvbmVJZDogdGhpcy56b25lSWQsXG4gICAgICAgIGV2YWx1YXRlVGFyZ2V0SGVhbHRoOiBldmFsdWF0ZVRhcmdldEhlYWx0aCxcbiAgICAgIH0sXG4gICAgICBtZXRhOiB7XG4gICAgICAgIG9yaWdfY3VzdG9tX3R5cGU6IFwiUjUzX0FMSUFTXCIsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==