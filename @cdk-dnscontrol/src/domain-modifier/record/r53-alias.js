"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolR53AliasRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_R53_ALIAS_RECORD_SYMBOL = Symbol.for("DnscontrolR53AliasRecord");
// eslint-disable-next-line
const r53AliasTypeString = [
    "A",
    "AAAA",
    "CNAME",
    "CAA",
    "MX",
    "TXT",
    "PTR",
    "SPF",
    "SRV",
    "NAPTR",
];
class DnscontrolR53AliasRecord extends dnscontrol_record_1.DnscontrolRecord {
    r53AliasType;
    zoneId;
    isEnabledEvaluateTargetHealth;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "R53_ALIAS",
            label: props.label,
            target: props.target,
            ttl: props.ttl,
            isEnsuredAbsent: props.isEnsuredAbsent,
            meta: props.meta,
        });
        this.r53AliasType = props.r53AliasType;
        this.zoneId = props.zoneId;
        this.isEnabledEvaluateTargetHealth = props.isEnabledEvaluateTargetHealth;
    }
    static isDnscontrolR53AliasRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_R53_ALIAS_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        // missing Boolean.prototype.toString() method
        // https://github.com/microsoft/TypeScript/issues/38347
        const evaluateTargetHealth = (() => {
            if (this.isEnabledEvaluateTargetHealth == null) {
                return "false";
            }
            return this.isEnabledEvaluateTargetHealth ? "true" : "false";
        })();
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            r53Alias: {
                type: this.r53AliasType,
                zoneId: this.zoneId,
                evaluateTargetHealth: evaluateTargetHealth,
            },
            meta: {
                ...this.meta,
                orig_custom_type: "R53_ALIAS",
            },
        };
    }
}
exports.DnscontrolR53AliasRecord = DnscontrolR53AliasRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicjUzLWFsaWFzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicjUzLWFsaWFzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJEQUF1RDtBQUV2RCxNQUFNLG1DQUFtQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQ3BELDBCQUEwQixDQUMzQixDQUFDO0FBRUYsMkJBQTJCO0FBQzNCLE1BQU0sa0JBQWtCLEdBQUc7SUFDekIsR0FBRztJQUNILE1BQU07SUFDTixPQUFPO0lBQ1AsS0FBSztJQUNMLElBQUk7SUFDSixLQUFLO0lBQ0wsS0FBSztJQUNMLEtBQUs7SUFDTCxLQUFLO0lBQ0wsT0FBTztDQUNDLENBQUM7QUFlWCxNQUFhLHdCQUF5QixTQUFRLG9DQUFnQjtJQUNuRCxZQUFZLENBQWU7SUFDM0IsTUFBTSxDQUFzQjtJQUM1Qiw2QkFBNkIsQ0FBdUI7SUFDN0QsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBb0M7UUFFcEMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixVQUFVLEVBQUUsV0FBVztZQUN2QixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFlBQVksR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsNkJBQTZCLEdBQUcsS0FBSyxDQUFDLDZCQUE2QixDQUFDO0lBQzNFLENBQUM7SUFDTSxNQUFNLENBQUMsMEJBQTBCLENBQ3RDLENBQVU7UUFFVixPQUFPLENBQ0wsQ0FBQyxJQUFJLElBQUk7WUFDVCxPQUFPLENBQUMsS0FBSyxRQUFRO1lBQ3JCLG1DQUFtQyxJQUFJLENBQUMsQ0FDekMsQ0FBQztJQUNKLENBQUM7SUFDTSxrQkFBa0I7UUFDdkIsOENBQThDO1FBQzlDLHVEQUF1RDtRQUN2RCxNQUFNLG9CQUFvQixHQUFHLENBQUMsR0FBRyxFQUFFO1lBQ2pDLElBQUksSUFBSSxDQUFDLDZCQUE2QixJQUFJLElBQUksRUFBRSxDQUFDO2dCQUMvQyxPQUFPLE9BQU8sQ0FBQztZQUNqQixDQUFDO1lBQ0QsT0FBTyxJQUFJLENBQUMsNkJBQTZCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDTCxPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7WUFDMUIsUUFBUSxFQUFFO2dCQUNSLElBQUksRUFBRSxJQUFJLENBQUMsWUFBWTtnQkFDdkIsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO2dCQUNuQixvQkFBb0IsRUFBRSxvQkFBb0I7YUFDM0M7WUFDRCxJQUFJLEVBQUU7Z0JBQ0osR0FBRyxJQUFJLENBQUMsSUFBSTtnQkFDWixnQkFBZ0IsRUFBRSxXQUFXO2FBQzlCO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQXZERCw0REF1REMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRG5zY29udHJvbFI1M0FsaWFzUmVjb3JkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Ruc2NvbnRyb2wtcmVjb3JkLWNvbmZpZ1wiO1xuaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tIFwiLi4vLi4vdHlwZXMvZHVyYXRpb25cIjtcbmltcG9ydCB7IERuc2NvbnRyb2xSZWNvcmQgfSBmcm9tIFwiLi9kbnNjb250cm9sLXJlY29yZFwiO1xuXG5jb25zdCBETlNfQ09OVFJPTF9SNTNfQUxJQVNfUkVDT1JEX1NZTUJPTCA9IFN5bWJvbC5mb3IoXG4gIFwiRG5zY29udHJvbFI1M0FsaWFzUmVjb3JkXCIsXG4pO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmNvbnN0IHI1M0FsaWFzVHlwZVN0cmluZyA9IFtcbiAgXCJBXCIsXG4gIFwiQUFBQVwiLFxuICBcIkNOQU1FXCIsXG4gIFwiQ0FBXCIsXG4gIFwiTVhcIixcbiAgXCJUWFRcIixcbiAgXCJQVFJcIixcbiAgXCJTUEZcIixcbiAgXCJTUlZcIixcbiAgXCJOQVBUUlwiLFxuXSBhcyBjb25zdDtcblxuZXhwb3J0IHR5cGUgUjUzQWxpYXNUeXBlID0gKHR5cGVvZiByNTNBbGlhc1R5cGVTdHJpbmcpW251bWJlcl07XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5zY29udHJvbFI1M0FsaWFzUmVjb3JkUHJvcHMge1xuICByZWFkb25seSBsYWJlbDogc3RyaW5nO1xuICByZWFkb25seSB0YXJnZXQ6IHN0cmluZztcbiAgcmVhZG9ubHkgcjUzQWxpYXNUeXBlOiBSNTNBbGlhc1R5cGU7XG4gIHJlYWRvbmx5IHpvbmVJZD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgaXNFbmFibGVkRXZhbHVhdGVUYXJnZXRIZWFsdGg/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSB0dGw/OiBEdXJhdGlvbiB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgaXNFbnN1cmVkQWJzZW50PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgbWV0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEbnNjb250cm9sUjUzQWxpYXNSZWNvcmQgZXh0ZW5kcyBEbnNjb250cm9sUmVjb3JkIHtcbiAgcmVhZG9ubHkgcjUzQWxpYXNUeXBlOiBSNTNBbGlhc1R5cGU7XG4gIHJlYWRvbmx5IHpvbmVJZD86IHN0cmluZyB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgaXNFbmFibGVkRXZhbHVhdGVUYXJnZXRIZWFsdGg/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcHM6IERuc2NvbnRyb2xSNTNBbGlhc1JlY29yZFByb3BzLFxuICApIHtcbiAgICBzdXBlcihzY29wZSwgaWQsIHtcbiAgICAgIHJlY29yZFR5cGU6IFwiUjUzX0FMSUFTXCIsXG4gICAgICBsYWJlbDogcHJvcHMubGFiZWwsXG4gICAgICB0YXJnZXQ6IHByb3BzLnRhcmdldCxcbiAgICAgIHR0bDogcHJvcHMudHRsLFxuICAgICAgaXNFbnN1cmVkQWJzZW50OiBwcm9wcy5pc0Vuc3VyZWRBYnNlbnQsXG4gICAgICBtZXRhOiBwcm9wcy5tZXRhLFxuICAgIH0pO1xuICAgIHRoaXMucjUzQWxpYXNUeXBlID0gcHJvcHMucjUzQWxpYXNUeXBlO1xuICAgIHRoaXMuem9uZUlkID0gcHJvcHMuem9uZUlkO1xuICAgIHRoaXMuaXNFbmFibGVkRXZhbHVhdGVUYXJnZXRIZWFsdGggPSBwcm9wcy5pc0VuYWJsZWRFdmFsdWF0ZVRhcmdldEhlYWx0aDtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzRG5zY29udHJvbFI1M0FsaWFzUmVjb3JkKFxuICAgIHg6IHVua25vd24sXG4gICk6IHggaXMgRG5zY29udHJvbFI1M0FsaWFzUmVjb3JkIHtcbiAgICByZXR1cm4gKFxuICAgICAgeCAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgRE5TX0NPTlRST0xfUjUzX0FMSUFTX1JFQ09SRF9TWU1CT0wgaW4geFxuICAgICk7XG4gIH1cbiAgcHVibGljIHJlbmRlclJlY29yZENvbmZpZygpOiBEbnNjb250cm9sUjUzQWxpYXNSZWNvcmRDb25maWcge1xuICAgIC8vIG1pc3NpbmcgQm9vbGVhbi5wcm90b3R5cGUudG9TdHJpbmcoKSBtZXRob2RcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzM4MzQ3XG4gICAgY29uc3QgZXZhbHVhdGVUYXJnZXRIZWFsdGggPSAoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaXNFbmFibGVkRXZhbHVhdGVUYXJnZXRIZWFsdGggPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gXCJmYWxzZVwiO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuaXNFbmFibGVkRXZhbHVhdGVUYXJnZXRIZWFsdGggPyBcInRydWVcIiA6IFwiZmFsc2VcIjtcbiAgICB9KSgpO1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0LFxuICAgICAgcmVjb3JkVHlwZTogdGhpcy5yZWNvcmRUeXBlLFxuICAgICAgdHRsOiB0aGlzLnR0bD8udG9TZWNvbmRzKCksXG4gICAgICByNTNBbGlhczoge1xuICAgICAgICB0eXBlOiB0aGlzLnI1M0FsaWFzVHlwZSxcbiAgICAgICAgem9uZUlkOiB0aGlzLnpvbmVJZCxcbiAgICAgICAgZXZhbHVhdGVUYXJnZXRIZWFsdGg6IGV2YWx1YXRlVGFyZ2V0SGVhbHRoLFxuICAgICAgfSxcbiAgICAgIG1ldGE6IHtcbiAgICAgICAgLi4udGhpcy5tZXRhLFxuICAgICAgICBvcmlnX2N1c3RvbV90eXBlOiBcIlI1M19BTElBU1wiLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG4iXX0=