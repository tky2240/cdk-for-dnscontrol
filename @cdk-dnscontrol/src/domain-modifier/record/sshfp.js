"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolSshfpRecord = exports.getSshfpFingerprintFormatStringFromValue = exports.sshfpFingerprintFormat = exports.getSshfpAlgorithmStringFromValue = exports.sshfpAlgorithm = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_SSHFP_RECORD_SYMBOL = Symbol.for("DnscontrolSshfpRecord");
exports.sshfpAlgorithm = {
    RSA: 1,
    DSA: 2,
    SCDSA: 3,
    ED25519: 4,
};
function isSshfpAlgorithm(x) {
    return typeof x === "string" && Object.keys(exports.sshfpAlgorithm).includes(x);
}
const getSshfpAlgorithmStringFromValue = (value) => {
    const algorithm = Object.entries(exports.sshfpAlgorithm).find((sshfpAlgorithm) => {
        return sshfpAlgorithm[1] === value;
    });
    const sshfpAlgorithmString = algorithm?.[0];
    if (isSshfpAlgorithm(sshfpAlgorithmString)) {
        return sshfpAlgorithmString;
    }
    throw new Error(`Invalid SSHFP algorithm value: ${value}`);
};
exports.getSshfpAlgorithmStringFromValue = getSshfpAlgorithmStringFromValue;
exports.sshfpFingerprintFormat = {
    "SHA-1": 1,
    "SHA-256": 2,
};
function isSshfpFingerprintFormat(x) {
    return (typeof x === "string" && Object.keys(exports.sshfpFingerprintFormat).includes(x));
}
const getSshfpFingerprintFormatStringFromValue = (value) => {
    const fingerprintFormat = Object.entries(exports.sshfpFingerprintFormat).find((sshfpFingerprintFormat) => {
        return sshfpFingerprintFormat[1] === value;
    });
    const sshfpFingerprintFormatString = fingerprintFormat?.[0];
    if (isSshfpFingerprintFormat(sshfpFingerprintFormatString)) {
        return sshfpFingerprintFormatString;
    }
    throw new Error(`Invalid SSHFP fingerprint format value: ${value}`);
};
exports.getSshfpFingerprintFormatStringFromValue = getSshfpFingerprintFormatStringFromValue;
class DnscontrolSshfpRecord extends dnscontrol_record_1.DnscontrolRecord {
    algorithm;
    fingerprintFormat;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "SSHFP",
            label: props.label,
            target: props.value,
            ttl: props.ttl,
            isEnsuredAbsent: props.isEnsuredAbsent,
            meta: props.meta,
        });
        this.algorithm = props.algorithm;
        this.fingerprintFormat = props.fingerprintFormat;
    }
    static isDnscontrolSshfpRecord(x) {
        return (x != null && typeof x === "object" && DNS_CONTROL_SSHFP_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            sshfpAlgorithm: exports.sshfpAlgorithm[this.algorithm],
            sshfpFingerprint: exports.sshfpFingerprintFormat[this.fingerprintFormat],
            meta: this.meta,
        };
    }
}
exports.DnscontrolSshfpRecord = DnscontrolSshfpRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3NoZnAuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJzc2hmcC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwyREFBdUQ7QUFFdkQsTUFBTSwrQkFBK0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLHVCQUF1QixDQUFDLENBQUM7QUFFL0QsUUFBQSxjQUFjLEdBQUc7SUFDNUIsR0FBRyxFQUFFLENBQUM7SUFDTixHQUFHLEVBQUUsQ0FBQztJQUNOLEtBQUssRUFBRSxDQUFDO0lBQ1IsT0FBTyxFQUFFLENBQUM7Q0FDRixDQUFDO0FBR1gsU0FBUyxnQkFBZ0IsQ0FBQyxDQUFVO0lBQ2xDLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsc0JBQWMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUMxRSxDQUFDO0FBQ00sTUFBTSxnQ0FBZ0MsR0FBRyxDQUM5QyxLQUFhLEVBQ0csRUFBRTtJQUNsQixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLHNCQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxjQUFjLEVBQUUsRUFBRTtRQUN2RSxPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsS0FBSyxLQUFLLENBQUM7SUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDSCxNQUFNLG9CQUFvQixHQUFHLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVDLElBQUksZ0JBQWdCLENBQUMsb0JBQW9CLENBQUMsRUFBRSxDQUFDO1FBQzNDLE9BQU8sb0JBQW9CLENBQUM7SUFDOUIsQ0FBQztJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsa0NBQWtDLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDN0QsQ0FBQyxDQUFDO0FBWFcsUUFBQSxnQ0FBZ0Msb0NBVzNDO0FBRVcsUUFBQSxzQkFBc0IsR0FBRztJQUNwQyxPQUFPLEVBQUUsQ0FBQztJQUNWLFNBQVMsRUFBRSxDQUFDO0NBQ0osQ0FBQztBQUdYLFNBQVMsd0JBQXdCLENBQUMsQ0FBVTtJQUMxQyxPQUFPLENBQ0wsT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsOEJBQXNCLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQ3pFLENBQUM7QUFDSixDQUFDO0FBQ00sTUFBTSx3Q0FBd0MsR0FBRyxDQUN0RCxLQUFhLEVBQ1csRUFBRTtJQUMxQixNQUFNLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsOEJBQXNCLENBQUMsQ0FBQyxJQUFJLENBQ25FLENBQUMsc0JBQXNCLEVBQUUsRUFBRTtRQUN6QixPQUFPLHNCQUFzQixDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQztJQUM3QyxDQUFDLENBQ0YsQ0FBQztJQUNGLE1BQU0sNEJBQTRCLEdBQUcsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM1RCxJQUFJLHdCQUF3QixDQUFDLDRCQUE0QixDQUFDLEVBQUUsQ0FBQztRQUMzRCxPQUFPLDRCQUE0QixDQUFDO0lBQ3RDLENBQUM7SUFDRCxNQUFNLElBQUksS0FBSyxDQUFDLDJDQUEyQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0FBQ3RFLENBQUMsQ0FBQztBQWJXLFFBQUEsd0NBQXdDLDRDQWFuRDtBQVlGLE1BQWEscUJBQXNCLFNBQVEsb0NBQWdCO0lBQ3pDLFNBQVMsQ0FBaUI7SUFDMUIsaUJBQWlCLENBQXlCO0lBQzFELFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBaUM7UUFDekUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixVQUFVLEVBQUUsT0FBTztZQUNuQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxLQUFLO1lBQ25CLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO1FBQ2pDLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxLQUFLLENBQUMsaUJBQWlCLENBQUM7SUFDbkQsQ0FBQztJQUNNLE1BQU0sQ0FBQyx1QkFBdUIsQ0FDbkMsQ0FBVTtRQUVWLE9BQU8sQ0FDTCxDQUFDLElBQUksSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLFFBQVEsSUFBSSwrQkFBK0IsSUFBSSxDQUFDLENBQzNFLENBQUM7SUFDSixDQUFDO0lBQ00sa0JBQWtCO1FBQ3ZCLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtZQUMxQixjQUFjLEVBQUUsc0JBQWMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO1lBQzlDLGdCQUFnQixFQUFFLDhCQUFzQixDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQztZQUNoRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7U0FDaEIsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQWpDRCxzREFpQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRG5zY29udHJvbFNzaGZwUmVjb3JkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Ruc2NvbnRyb2wtcmVjb3JkLWNvbmZpZ1wiO1xuaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tIFwiLi4vLi4vdHlwZXMvZHVyYXRpb25cIjtcbmltcG9ydCB7IERuc2NvbnRyb2xSZWNvcmQgfSBmcm9tIFwiLi9kbnNjb250cm9sLXJlY29yZFwiO1xuXG5jb25zdCBETlNfQ09OVFJPTF9TU0hGUF9SRUNPUkRfU1lNQk9MID0gU3ltYm9sLmZvcihcIkRuc2NvbnRyb2xTc2hmcFJlY29yZFwiKTtcblxuZXhwb3J0IGNvbnN0IHNzaGZwQWxnb3JpdGhtID0ge1xuICBSU0E6IDEsXG4gIERTQTogMixcbiAgU0NEU0E6IDMsXG4gIEVEMjU1MTk6IDQsXG59IGFzIGNvbnN0O1xuXG5leHBvcnQgdHlwZSBTc2hmcEFsZ29yaXRobSA9IGtleW9mIHR5cGVvZiBzc2hmcEFsZ29yaXRobTtcbmZ1bmN0aW9uIGlzU3NoZnBBbGdvcml0aG0oeDogdW5rbm93bik6IHggaXMgU3NoZnBBbGdvcml0aG0ge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3RyaW5nXCIgJiYgT2JqZWN0LmtleXMoc3NoZnBBbGdvcml0aG0pLmluY2x1ZGVzKHgpO1xufVxuZXhwb3J0IGNvbnN0IGdldFNzaGZwQWxnb3JpdGhtU3RyaW5nRnJvbVZhbHVlID0gKFxuICB2YWx1ZTogbnVtYmVyLFxuKTogU3NoZnBBbGdvcml0aG0gPT4ge1xuICBjb25zdCBhbGdvcml0aG0gPSBPYmplY3QuZW50cmllcyhzc2hmcEFsZ29yaXRobSkuZmluZCgoc3NoZnBBbGdvcml0aG0pID0+IHtcbiAgICByZXR1cm4gc3NoZnBBbGdvcml0aG1bMV0gPT09IHZhbHVlO1xuICB9KTtcbiAgY29uc3Qgc3NoZnBBbGdvcml0aG1TdHJpbmcgPSBhbGdvcml0aG0/LlswXTtcbiAgaWYgKGlzU3NoZnBBbGdvcml0aG0oc3NoZnBBbGdvcml0aG1TdHJpbmcpKSB7XG4gICAgcmV0dXJuIHNzaGZwQWxnb3JpdGhtU3RyaW5nO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBTU0hGUCBhbGdvcml0aG0gdmFsdWU6ICR7dmFsdWV9YCk7XG59O1xuXG5leHBvcnQgY29uc3Qgc3NoZnBGaW5nZXJwcmludEZvcm1hdCA9IHtcbiAgXCJTSEEtMVwiOiAxLFxuICBcIlNIQS0yNTZcIjogMixcbn0gYXMgY29uc3Q7XG5cbmV4cG9ydCB0eXBlIFNzaGZwRmluZ2VycHJpbnRGb3JtYXQgPSBrZXlvZiB0eXBlb2Ygc3NoZnBGaW5nZXJwcmludEZvcm1hdDtcbmZ1bmN0aW9uIGlzU3NoZnBGaW5nZXJwcmludEZvcm1hdCh4OiB1bmtub3duKTogeCBpcyBTc2hmcEZpbmdlcnByaW50Rm9ybWF0IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgeCA9PT0gXCJzdHJpbmdcIiAmJiBPYmplY3Qua2V5cyhzc2hmcEZpbmdlcnByaW50Rm9ybWF0KS5pbmNsdWRlcyh4KVxuICApO1xufVxuZXhwb3J0IGNvbnN0IGdldFNzaGZwRmluZ2VycHJpbnRGb3JtYXRTdHJpbmdGcm9tVmFsdWUgPSAoXG4gIHZhbHVlOiBudW1iZXIsXG4pOiBTc2hmcEZpbmdlcnByaW50Rm9ybWF0ID0+IHtcbiAgY29uc3QgZmluZ2VycHJpbnRGb3JtYXQgPSBPYmplY3QuZW50cmllcyhzc2hmcEZpbmdlcnByaW50Rm9ybWF0KS5maW5kKFxuICAgIChzc2hmcEZpbmdlcnByaW50Rm9ybWF0KSA9PiB7XG4gICAgICByZXR1cm4gc3NoZnBGaW5nZXJwcmludEZvcm1hdFsxXSA9PT0gdmFsdWU7XG4gICAgfSxcbiAgKTtcbiAgY29uc3Qgc3NoZnBGaW5nZXJwcmludEZvcm1hdFN0cmluZyA9IGZpbmdlcnByaW50Rm9ybWF0Py5bMF07XG4gIGlmIChpc1NzaGZwRmluZ2VycHJpbnRGb3JtYXQoc3NoZnBGaW5nZXJwcmludEZvcm1hdFN0cmluZykpIHtcbiAgICByZXR1cm4gc3NoZnBGaW5nZXJwcmludEZvcm1hdFN0cmluZztcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgU1NIRlAgZmluZ2VycHJpbnQgZm9ybWF0IHZhbHVlOiAke3ZhbHVlfWApO1xufTtcblxuZXhwb3J0IGludGVyZmFjZSBEbnNjb250cm9sU3NoZnBSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHZhbHVlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGFsZ29yaXRobTogU3NoZnBBbGdvcml0aG07XG4gIHJlYWRvbmx5IGZpbmdlcnByaW50Rm9ybWF0OiBTc2hmcEZpbmdlcnByaW50Rm9ybWF0O1xuICByZWFkb25seSB0dGw/OiBEdXJhdGlvbiB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgaXNFbnN1cmVkQWJzZW50PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgbWV0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEbnNjb250cm9sU3NoZnBSZWNvcmQgZXh0ZW5kcyBEbnNjb250cm9sUmVjb3JkIHtcbiAgcHVibGljIHJlYWRvbmx5IGFsZ29yaXRobTogU3NoZnBBbGdvcml0aG07XG4gIHB1YmxpYyByZWFkb25seSBmaW5nZXJwcmludEZvcm1hdDogU3NoZnBGaW5nZXJwcmludEZvcm1hdDtcbiAgY29uc3RydWN0b3Ioc2NvcGU6IENvbnN0cnVjdCwgaWQ6IHN0cmluZywgcHJvcHM6IERuc2NvbnRyb2xTc2hmcFJlY29yZFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIlNTSEZQXCIsXG4gICAgICBsYWJlbDogcHJvcHMubGFiZWwsXG4gICAgICB0YXJnZXQ6IHByb3BzLnZhbHVlLFxuICAgICAgdHRsOiBwcm9wcy50dGwsXG4gICAgICBpc0Vuc3VyZWRBYnNlbnQ6IHByb3BzLmlzRW5zdXJlZEFic2VudCxcbiAgICAgIG1ldGE6IHByb3BzLm1ldGEsXG4gICAgfSk7XG4gICAgdGhpcy5hbGdvcml0aG0gPSBwcm9wcy5hbGdvcml0aG07XG4gICAgdGhpcy5maW5nZXJwcmludEZvcm1hdCA9IHByb3BzLmZpbmdlcnByaW50Rm9ybWF0O1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgaXNEbnNjb250cm9sU3NoZnBSZWNvcmQoXG4gICAgeDogdW5rbm93bixcbiAgKTogeCBpcyBEbnNjb250cm9sU3NoZnBSZWNvcmQge1xuICAgIHJldHVybiAoXG4gICAgICB4ICE9IG51bGwgJiYgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgRE5TX0NPTlRST0xfU1NIRlBfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xTc2hmcFJlY29yZENvbmZpZyB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgIHRhcmdldDogdGhpcy50YXJnZXQsXG4gICAgICByZWNvcmRUeXBlOiB0aGlzLnJlY29yZFR5cGUsXG4gICAgICB0dGw6IHRoaXMudHRsPy50b1NlY29uZHMoKSxcbiAgICAgIHNzaGZwQWxnb3JpdGhtOiBzc2hmcEFsZ29yaXRobVt0aGlzLmFsZ29yaXRobV0sXG4gICAgICBzc2hmcEZpbmdlcnByaW50OiBzc2hmcEZpbmdlcnByaW50Rm9ybWF0W3RoaXMuZmluZ2VycHJpbnRGb3JtYXRdLFxuICAgICAgbWV0YTogdGhpcy5tZXRhLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==