"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolCfTempRedirectRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_CF_TEMP_REDIRECT_RECORD_SYMBOL = Symbol.for("DnscontrolCfTempRedirectRecord");
class DnscontrolCfTempRedirectRecord extends dnscontrol_record_1.DnscontrolRecord {
    source;
    destination;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "CF_TEMP_REDIRECT",
            label: "@",
            target: `${props.source},${props.destination}`,
            ttl: props.ttl,
            isEnsuredAbsent: props.isEnsuredAbsent,
            meta: props.meta,
        });
        if (props.source.includes(",")) {
            throw new Error("source must include no commma");
        }
        if (props.destination.includes(",")) {
            throw new Error("destination must include no commma");
        }
        this.source = props.source;
        this.destination = props.destination;
    }
    static isDnscontrolCfTempRedirectRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_CF_TEMP_REDIRECT_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            meta: {
                ...this.meta,
                orig_custom_type: "CF_TEMP_REDIRECT",
            },
        };
    }
}
exports.DnscontrolCfTempRedirectRecord = DnscontrolCfTempRedirectRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2YtdGVtcC1yZWRpcmVjdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNmLXRlbXAtcmVkaXJlY3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBR0EsMkRBQXVEO0FBRXZELE1BQU0sMENBQTBDLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FDM0QsZ0NBQWdDLENBQ2pDLENBQUM7QUFVRixNQUFhLDhCQUErQixTQUFRLG9DQUFnQjtJQUN6RCxNQUFNLENBQVM7SUFDZixXQUFXLENBQVM7SUFDN0IsWUFDRSxLQUFnQixFQUNoQixFQUFVLEVBQ1YsS0FBMEM7UUFFMUMsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixVQUFVLEVBQUUsa0JBQWtCO1lBQzlCLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQzlDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBQ0QsSUFBSSxLQUFLLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ3BDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLENBQUMsQ0FBQztRQUN4RCxDQUFDO1FBQ0QsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztJQUN2QyxDQUFDO0lBQ00sTUFBTSxDQUFDLGdDQUFnQyxDQUM1QyxDQUFVO1FBRVYsT0FBTyxDQUNMLENBQUMsSUFBSSxJQUFJO1lBQ1QsT0FBTyxDQUFDLEtBQUssUUFBUTtZQUNyQiwwQ0FBMEMsSUFBSSxDQUFDLENBQ2hELENBQUM7SUFDSixDQUFDO0lBQ00sa0JBQWtCO1FBQ3ZCLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtZQUMxQixJQUFJLEVBQUU7Z0JBQ0osR0FBRyxJQUFJLENBQUMsSUFBSTtnQkFDWixnQkFBZ0IsRUFBRSxrQkFBa0I7YUFDckM7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBOUNELHdFQThDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sQ2ZUZW1wUmVkaXJlY3RSZWNvcmRDb25maWcgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtY29uZmlnXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy9kdXJhdGlvblwiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZCB9IGZyb20gXCIuL2Ruc2NvbnRyb2wtcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX0NGX1RFTVBfUkVESVJFQ1RfUkVDT1JEX1NZTUJPTCA9IFN5bWJvbC5mb3IoXG4gIFwiRG5zY29udHJvbENmVGVtcFJlZGlyZWN0UmVjb3JkXCIsXG4pO1xuXG5leHBvcnQgaW50ZXJmYWNlIERuc2NvbnRyb2xDZlRlbXBSZWRpcmVjdFJlY29yZFByb3BzIHtcbiAgcmVhZG9ubHkgc291cmNlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGRlc3RpbmF0aW9uOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBpc0Vuc3VyZWRBYnNlbnQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBtZXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIERuc2NvbnRyb2xDZlRlbXBSZWRpcmVjdFJlY29yZCBleHRlbmRzIERuc2NvbnRyb2xSZWNvcmQge1xuICByZWFkb25seSBzb3VyY2U6IHN0cmluZztcbiAgcmVhZG9ubHkgZGVzdGluYXRpb246IHN0cmluZztcbiAgY29uc3RydWN0b3IoXG4gICAgc2NvcGU6IENvbnN0cnVjdCxcbiAgICBpZDogc3RyaW5nLFxuICAgIHByb3BzOiBEbnNjb250cm9sQ2ZUZW1wUmVkaXJlY3RSZWNvcmRQcm9wcyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIkNGX1RFTVBfUkVESVJFQ1RcIixcbiAgICAgIGxhYmVsOiBcIkBcIixcbiAgICAgIHRhcmdldDogYCR7cHJvcHMuc291cmNlfSwke3Byb3BzLmRlc3RpbmF0aW9ufWAsXG4gICAgICB0dGw6IHByb3BzLnR0bCxcbiAgICAgIGlzRW5zdXJlZEFic2VudDogcHJvcHMuaXNFbnN1cmVkQWJzZW50LFxuICAgICAgbWV0YTogcHJvcHMubWV0YSxcbiAgICB9KTtcbiAgICBpZiAocHJvcHMuc291cmNlLmluY2x1ZGVzKFwiLFwiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic291cmNlIG11c3QgaW5jbHVkZSBubyBjb21tbWFcIik7XG4gICAgfVxuICAgIGlmIChwcm9wcy5kZXN0aW5hdGlvbi5pbmNsdWRlcyhcIixcIikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcImRlc3RpbmF0aW9uIG11c3QgaW5jbHVkZSBubyBjb21tbWFcIik7XG4gICAgfVxuICAgIHRoaXMuc291cmNlID0gcHJvcHMuc291cmNlO1xuICAgIHRoaXMuZGVzdGluYXRpb24gPSBwcm9wcy5kZXN0aW5hdGlvbjtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzRG5zY29udHJvbENmVGVtcFJlZGlyZWN0UmVjb3JkKFxuICAgIHg6IHVua25vd24sXG4gICk6IHggaXMgRG5zY29udHJvbENmVGVtcFJlZGlyZWN0UmVjb3JkIHtcbiAgICByZXR1cm4gKFxuICAgICAgeCAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgRE5TX0NPTlRST0xfQ0ZfVEVNUF9SRURJUkVDVF9SRUNPUkRfU1lNQk9MIGluIHhcbiAgICApO1xuICB9XG4gIHB1YmxpYyByZW5kZXJSZWNvcmRDb25maWcoKTogRG5zY29udHJvbENmVGVtcFJlZGlyZWN0UmVjb3JkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCxcbiAgICAgIHJlY29yZFR5cGU6IHRoaXMucmVjb3JkVHlwZSxcbiAgICAgIHR0bDogdGhpcy50dGw/LnRvU2Vjb25kcygpLFxuICAgICAgbWV0YToge1xuICAgICAgICAuLi50aGlzLm1ldGEsXG4gICAgICAgIG9yaWdfY3VzdG9tX3R5cGU6IFwiQ0ZfVEVNUF9SRURJUkVDVFwiLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG4iXX0=