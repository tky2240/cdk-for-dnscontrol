"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolCfWorkerRouteRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_CF_WORKER_ROUTE_RECORD_SYMBOL = Symbol.for("DnscontrolCfWorkerRouteRecord");
class DnscontrolCfWorkerRouteRecord extends dnscontrol_record_1.DnscontrolRecord {
    pattern;
    script;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "CF_WORKER_ROUTE",
            label: "@",
            target: `${props.pattern},${props.script}`,
            ttl: props.ttl,
            isEnsuredAbsent: props.isEnsuredAbsent,
            meta: props.meta,
        });
        if (props.pattern.includes(",")) {
            throw new Error("pattern must include no commma");
        }
        if (props.script.includes(",")) {
            throw new Error("script must include no commma");
        }
        this.pattern = props.pattern;
        this.script = props.script;
    }
    static isDnscontrolCfWorkerRouteRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_CF_WORKER_ROUTE_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            meta: {
                ...this.meta,
                orig_custom_type: "CF_WORKER_ROUTE",
            },
        };
    }
}
exports.DnscontrolCfWorkerRouteRecord = DnscontrolCfWorkerRouteRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Ytd29ya2VyLXJvdXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2Ytd29ya2VyLXJvdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJEQUF1RDtBQUV2RCxNQUFNLHlDQUF5QyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQzFELCtCQUErQixDQUNoQyxDQUFDO0FBVUYsTUFBYSw2QkFBOEIsU0FBUSxvQ0FBZ0I7SUFDeEQsT0FBTyxDQUFTO0lBQ2hCLE1BQU0sQ0FBUztJQUN4QixZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUF5QztRQUV6QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFVBQVUsRUFBRSxpQkFBaUI7WUFDN0IsS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDMUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1lBQ2QsZUFBZSxFQUFFLEtBQUssQ0FBQyxlQUFlO1lBQ3RDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSTtTQUNqQixDQUFDLENBQUM7UUFDSCxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDaEMsTUFBTSxJQUFJLEtBQUssQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1FBQ3BELENBQUM7UUFDRCxJQUFJLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUM7WUFDL0IsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsQ0FBQyxDQUFDO1FBQ25ELENBQUM7UUFDRCxJQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0lBQzdCLENBQUM7SUFDTSxNQUFNLENBQUMsK0JBQStCLENBQzNDLENBQVU7UUFFVixPQUFPLENBQ0wsQ0FBQyxJQUFJLElBQUk7WUFDVCxPQUFPLENBQUMsS0FBSyxRQUFRO1lBQ3JCLHlDQUF5QyxJQUFJLENBQUMsQ0FDL0MsQ0FBQztJQUNKLENBQUM7SUFDTSxrQkFBa0I7UUFDdkIsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQzFCLElBQUksRUFBRTtnQkFDSixHQUFHLElBQUksQ0FBQyxJQUFJO2dCQUNaLGdCQUFnQixFQUFFLGlCQUFpQjthQUNwQztTQUNGLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUE5Q0Qsc0VBOENDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERuc2NvbnRyb2xDZldvcmtlclJvdXRlUmVjb3JkQ29uZmlnIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2Ruc2NvbnRyb2wtcmVjb3JkLWNvbmZpZ1wiO1xuaW1wb3J0IHsgRHVyYXRpb24gfSBmcm9tIFwiLi4vLi4vdHlwZXMvZHVyYXRpb25cIjtcbmltcG9ydCB7IERuc2NvbnRyb2xSZWNvcmQgfSBmcm9tIFwiLi9kbnNjb250cm9sLXJlY29yZFwiO1xuXG5jb25zdCBETlNfQ09OVFJPTF9DRl9XT1JLRVJfUk9VVEVfUkVDT1JEX1NZTUJPTCA9IFN5bWJvbC5mb3IoXG4gIFwiRG5zY29udHJvbENmV29ya2VyUm91dGVSZWNvcmRcIixcbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5zY29udHJvbENmV29ya2VyUm91dGVSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IHBhdHRlcm46IHN0cmluZztcbiAgcmVhZG9ubHkgc2NyaXB0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBpc0Vuc3VyZWRBYnNlbnQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBtZXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIERuc2NvbnRyb2xDZldvcmtlclJvdXRlUmVjb3JkIGV4dGVuZHMgRG5zY29udHJvbFJlY29yZCB7XG4gIHJlYWRvbmx5IHBhdHRlcm46IHN0cmluZztcbiAgcmVhZG9ubHkgc2NyaXB0OiBzdHJpbmc7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHNjb3BlOiBDb25zdHJ1Y3QsXG4gICAgaWQ6IHN0cmluZyxcbiAgICBwcm9wczogRG5zY29udHJvbENmV29ya2VyUm91dGVSZWNvcmRQcm9wcyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIkNGX1dPUktFUl9ST1VURVwiLFxuICAgICAgbGFiZWw6IFwiQFwiLFxuICAgICAgdGFyZ2V0OiBgJHtwcm9wcy5wYXR0ZXJufSwke3Byb3BzLnNjcmlwdH1gLFxuICAgICAgdHRsOiBwcm9wcy50dGwsXG4gICAgICBpc0Vuc3VyZWRBYnNlbnQ6IHByb3BzLmlzRW5zdXJlZEFic2VudCxcbiAgICAgIG1ldGE6IHByb3BzLm1ldGEsXG4gICAgfSk7XG4gICAgaWYgKHByb3BzLnBhdHRlcm4uaW5jbHVkZXMoXCIsXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXR0ZXJuIG11c3QgaW5jbHVkZSBubyBjb21tbWFcIik7XG4gICAgfVxuICAgIGlmIChwcm9wcy5zY3JpcHQuaW5jbHVkZXMoXCIsXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzY3JpcHQgbXVzdCBpbmNsdWRlIG5vIGNvbW1tYVwiKTtcbiAgICB9XG4gICAgdGhpcy5wYXR0ZXJuID0gcHJvcHMucGF0dGVybjtcbiAgICB0aGlzLnNjcmlwdCA9IHByb3BzLnNjcmlwdDtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzRG5zY29udHJvbENmV29ya2VyUm91dGVSZWNvcmQoXG4gICAgeDogdW5rbm93bixcbiAgKTogeCBpcyBEbnNjb250cm9sQ2ZXb3JrZXJSb3V0ZVJlY29yZCB7XG4gICAgcmV0dXJuIChcbiAgICAgIHggIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiZcbiAgICAgIEROU19DT05UUk9MX0NGX1dPUktFUl9ST1VURV9SRUNPUkRfU1lNQk9MIGluIHhcbiAgICApO1xuICB9XG4gIHB1YmxpYyByZW5kZXJSZWNvcmRDb25maWcoKTogRG5zY29udHJvbENmV29ya2VyUm91dGVSZWNvcmRDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0LFxuICAgICAgcmVjb3JkVHlwZTogdGhpcy5yZWNvcmRUeXBlLFxuICAgICAgdHRsOiB0aGlzLnR0bD8udG9TZWNvbmRzKCksXG4gICAgICBtZXRhOiB7XG4gICAgICAgIC4uLnRoaXMubWV0YSxcbiAgICAgICAgb3JpZ19jdXN0b21fdHlwZTogXCJDRl9XT1JLRVJfUk9VVEVcIixcbiAgICAgIH0sXG4gICAgfTtcbiAgfVxufVxuIl19