"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolCfWorkerRouteRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_CF_WORKER_ROUTE_RECORD_SYMBOL = Symbol.for("DnscontrolCfWorkerRouteRecord");
class DnscontrolCfWorkerRouteRecord extends dnscontrol_record_1.DnscontrolRecord {
    pattern;
    script;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "CF_WORKER_ROUTE",
            label: "@",
            target: `${props.pattern},${props.script}`,
            ttl: props.ttl,
        });
        if (props.pattern.includes(",")) {
            throw new Error("pattern must include no commma");
        }
        if (props.script.includes(",")) {
            throw new Error("script must include no commma");
        }
        this.pattern = props.pattern;
        this.script = props.script;
    }
    static isDnscontrolCfWorkerRouteRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_CF_WORKER_ROUTE_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            meta: {
                orig_custom_type: "CF_WORKER_ROUTE",
            },
        };
    }
}
exports.DnscontrolCfWorkerRouteRecord = DnscontrolCfWorkerRouteRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Ytd29ya2VyLXJvdXRlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiY2Ytd29ya2VyLXJvdXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJEQUF1RDtBQUV2RCxNQUFNLHlDQUF5QyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQzFELCtCQUErQixDQUNoQyxDQUFDO0FBUUYsTUFBYSw2QkFBOEIsU0FBUSxvQ0FBZ0I7SUFDeEQsT0FBTyxDQUFTO0lBQ2hCLE1BQU0sQ0FBUztJQUN4QixZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUF5QztRQUV6QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFVBQVUsRUFBRSxpQkFBaUI7WUFDN0IsS0FBSyxFQUFFLEdBQUc7WUFDVixNQUFNLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDMUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxHQUFHO1NBQ2YsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQ2hDLE1BQU0sSUFBSSxLQUFLLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztRQUNwRCxDQUFDO1FBQ0QsSUFBSSxLQUFLLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQUMsK0JBQStCLENBQUMsQ0FBQztRQUNuRCxDQUFDO1FBQ0QsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBQ00sTUFBTSxDQUFDLCtCQUErQixDQUMzQyxDQUFVO1FBRVYsT0FBTyxDQUNMLENBQUMsSUFBSSxJQUFJO1lBQ1QsT0FBTyxDQUFDLEtBQUssUUFBUTtZQUNyQix5Q0FBeUMsSUFBSSxDQUFDLENBQy9DLENBQUM7SUFDSixDQUFDO0lBQ00sa0JBQWtCO1FBQ3ZCLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtZQUMxQixJQUFJLEVBQUU7Z0JBQ0osZ0JBQWdCLEVBQUUsaUJBQWlCO2FBQ3BDO1NBQ0YsQ0FBQztJQUNKLENBQUM7Q0FDRjtBQTNDRCxzRUEyQ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb25zdHJ1Y3QgfSBmcm9tIFwiY29uc3RydWN0c1wiO1xuaW1wb3J0IHsgRG5zY29udHJvbENmV29ya2VyUm91dGVSZWNvcmRDb25maWcgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtY29uZmlnXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy9kdXJhdGlvblwiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZCB9IGZyb20gXCIuL2Ruc2NvbnRyb2wtcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX0NGX1dPUktFUl9ST1VURV9SRUNPUkRfU1lNQk9MID0gU3ltYm9sLmZvcihcbiAgXCJEbnNjb250cm9sQ2ZXb3JrZXJSb3V0ZVJlY29yZFwiLFxuKTtcblxuZXhwb3J0IGludGVyZmFjZSBEbnNjb250cm9sQ2ZXb3JrZXJSb3V0ZVJlY29yZFByb3BzIHtcbiAgcmVhZG9ubHkgcGF0dGVybjogc3RyaW5nO1xuICByZWFkb25seSBzY3JpcHQ6IHN0cmluZztcbiAgcmVhZG9ubHkgdHRsPzogRHVyYXRpb24gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEbnNjb250cm9sQ2ZXb3JrZXJSb3V0ZVJlY29yZCBleHRlbmRzIERuc2NvbnRyb2xSZWNvcmQge1xuICByZWFkb25seSBwYXR0ZXJuOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHNjcmlwdDogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcHM6IERuc2NvbnRyb2xDZldvcmtlclJvdXRlUmVjb3JkUHJvcHMsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgcmVjb3JkVHlwZTogXCJDRl9XT1JLRVJfUk9VVEVcIixcbiAgICAgIGxhYmVsOiBcIkBcIixcbiAgICAgIHRhcmdldDogYCR7cHJvcHMucGF0dGVybn0sJHtwcm9wcy5zY3JpcHR9YCxcbiAgICAgIHR0bDogcHJvcHMudHRsLFxuICAgIH0pO1xuICAgIGlmIChwcm9wcy5wYXR0ZXJuLmluY2x1ZGVzKFwiLFwiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwicGF0dGVybiBtdXN0IGluY2x1ZGUgbm8gY29tbW1hXCIpO1xuICAgIH1cbiAgICBpZiAocHJvcHMuc2NyaXB0LmluY2x1ZGVzKFwiLFwiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwic2NyaXB0IG11c3QgaW5jbHVkZSBubyBjb21tbWFcIik7XG4gICAgfVxuICAgIHRoaXMucGF0dGVybiA9IHByb3BzLnBhdHRlcm47XG4gICAgdGhpcy5zY3JpcHQgPSBwcm9wcy5zY3JpcHQ7XG4gIH1cbiAgcHVibGljIHN0YXRpYyBpc0Ruc2NvbnRyb2xDZldvcmtlclJvdXRlUmVjb3JkKFxuICAgIHg6IHVua25vd24sXG4gICk6IHggaXMgRG5zY29udHJvbENmV29ya2VyUm91dGVSZWNvcmQge1xuICAgIHJldHVybiAoXG4gICAgICB4ICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmXG4gICAgICBETlNfQ09OVFJPTF9DRl9XT1JLRVJfUk9VVEVfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xDZldvcmtlclJvdXRlUmVjb3JkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCxcbiAgICAgIHJlY29yZFR5cGU6IHRoaXMucmVjb3JkVHlwZSxcbiAgICAgIHR0bDogdGhpcy50dGw/LnRvU2Vjb25kcygpLFxuICAgICAgbWV0YToge1xuICAgICAgICBvcmlnX2N1c3RvbV90eXBlOiBcIkNGX1dPUktFUl9ST1VURVwiLFxuICAgICAgfSxcbiAgICB9O1xuICB9XG59XG4iXX0=