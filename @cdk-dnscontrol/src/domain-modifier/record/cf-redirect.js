"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolCfRedirectRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_CF_REDIRECT_RECORD_SYMBOL = Symbol.for("DnscontrolCfRedirectRecord");
class DnscontrolCfRedirectRecord extends dnscontrol_record_1.DnscontrolRecord {
    source;
    destination;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "CF_REDIRECT",
            label: "@",
            target: `${props.source},${props.destination}`,
            ttl: props.ttl,
        });
        if (props.source.includes(",")) {
            throw new Error("source must include no commma");
        }
        if (props.destination.includes(",")) {
            throw new Error("destination must include no commma");
        }
        this.source = props.source;
        this.destination = props.destination;
    }
    static isDnscontrolCfRedirectRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_CF_REDIRECT_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            meta: {
                orig_custom_type: "CF_REDIRECT",
            },
        };
    }
}
exports.DnscontrolCfRedirectRecord = DnscontrolCfRedirectRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2YtcmVkaXJlY3QuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjZi1yZWRpcmVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFHQSwyREFBdUQ7QUFFdkQsTUFBTSxxQ0FBcUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUN0RCw0QkFBNEIsQ0FDN0IsQ0FBQztBQVFGLE1BQWEsMEJBQTJCLFNBQVEsb0NBQWdCO0lBQ3JELE1BQU0sQ0FBUztJQUNmLFdBQVcsQ0FBUztJQUM3QixZQUNFLEtBQWdCLEVBQ2hCLEVBQVUsRUFDVixLQUFzQztRQUV0QyxLQUFLLENBQUMsS0FBSyxFQUFFLEVBQUUsRUFBRTtZQUNmLFVBQVUsRUFBRSxhQUFhO1lBQ3pCLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsV0FBVyxFQUFFO1lBQzlDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztTQUNmLENBQUMsQ0FBQztRQUNILElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUMvQixNQUFNLElBQUksS0FBSyxDQUFDLCtCQUErQixDQUFDLENBQUM7UUFDbkQsQ0FBQztRQUNELElBQUksS0FBSyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQztZQUNwQyxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxDQUFDLENBQUM7UUFDeEQsQ0FBQztRQUNELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7SUFDdkMsQ0FBQztJQUNNLE1BQU0sQ0FBQyw0QkFBNEIsQ0FDeEMsQ0FBVTtRQUVWLE9BQU8sQ0FDTCxDQUFDLElBQUksSUFBSTtZQUNULE9BQU8sQ0FBQyxLQUFLLFFBQVE7WUFDckIscUNBQXFDLElBQUksQ0FBQyxDQUMzQyxDQUFDO0lBQ0osQ0FBQztJQUNNLGtCQUFrQjtRQUN2QixPQUFPO1lBQ0wsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1lBQ2YsTUFBTSxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ25CLFVBQVUsRUFBRSxJQUFJLENBQUMsVUFBVTtZQUMzQixHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxTQUFTLEVBQUU7WUFDMUIsSUFBSSxFQUFFO2dCQUNKLGdCQUFnQixFQUFFLGFBQWE7YUFDaEM7U0FDRixDQUFDO0lBQ0osQ0FBQztDQUNGO0FBM0NELGdFQTJDQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbnN0cnVjdCB9IGZyb20gXCJjb25zdHJ1Y3RzXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sQ2ZSZWRpcmVjdFJlY29yZENvbmZpZyB9IGZyb20gXCIuLi8uLi90eXBlcy9kbnNjb250cm9sLXJlY29yZC1jb25maWdcIjtcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSBcIi4uLy4uL3R5cGVzL2R1cmF0aW9uXCI7XG5pbXBvcnQgeyBEbnNjb250cm9sUmVjb3JkIH0gZnJvbSBcIi4vZG5zY29udHJvbC1yZWNvcmRcIjtcblxuY29uc3QgRE5TX0NPTlRST0xfQ0ZfUkVESVJFQ1RfUkVDT1JEX1NZTUJPTCA9IFN5bWJvbC5mb3IoXG4gIFwiRG5zY29udHJvbENmUmVkaXJlY3RSZWNvcmRcIixcbik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5zY29udHJvbENmUmVkaXJlY3RSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IHNvdXJjZTogc3RyaW5nO1xuICByZWFkb25seSBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICByZWFkb25seSB0dGw/OiBEdXJhdGlvbiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIERuc2NvbnRyb2xDZlJlZGlyZWN0UmVjb3JkIGV4dGVuZHMgRG5zY29udHJvbFJlY29yZCB7XG4gIHJlYWRvbmx5IHNvdXJjZTogc3RyaW5nO1xuICByZWFkb25seSBkZXN0aW5hdGlvbjogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcHM6IERuc2NvbnRyb2xDZlJlZGlyZWN0UmVjb3JkUHJvcHMsXG4gICkge1xuICAgIHN1cGVyKHNjb3BlLCBpZCwge1xuICAgICAgcmVjb3JkVHlwZTogXCJDRl9SRURJUkVDVFwiLFxuICAgICAgbGFiZWw6IFwiQFwiLFxuICAgICAgdGFyZ2V0OiBgJHtwcm9wcy5zb3VyY2V9LCR7cHJvcHMuZGVzdGluYXRpb259YCxcbiAgICAgIHR0bDogcHJvcHMudHRsLFxuICAgIH0pO1xuICAgIGlmIChwcm9wcy5zb3VyY2UuaW5jbHVkZXMoXCIsXCIpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJzb3VyY2UgbXVzdCBpbmNsdWRlIG5vIGNvbW1tYVwiKTtcbiAgICB9XG4gICAgaWYgKHByb3BzLmRlc3RpbmF0aW9uLmluY2x1ZGVzKFwiLFwiKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVzdGluYXRpb24gbXVzdCBpbmNsdWRlIG5vIGNvbW1tYVwiKTtcbiAgICB9XG4gICAgdGhpcy5zb3VyY2UgPSBwcm9wcy5zb3VyY2U7XG4gICAgdGhpcy5kZXN0aW5hdGlvbiA9IHByb3BzLmRlc3RpbmF0aW9uO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgaXNEbnNjb250cm9sQ2ZSZWRpcmVjdFJlY29yZChcbiAgICB4OiB1bmtub3duLFxuICApOiB4IGlzIERuc2NvbnRyb2xDZlJlZGlyZWN0UmVjb3JkIHtcbiAgICByZXR1cm4gKFxuICAgICAgeCAhPSBudWxsICYmXG4gICAgICB0eXBlb2YgeCA9PT0gXCJvYmplY3RcIiAmJlxuICAgICAgRE5TX0NPTlRST0xfQ0ZfUkVESVJFQ1RfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xDZlJlZGlyZWN0UmVjb3JkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCxcbiAgICAgIHJlY29yZFR5cGU6IHRoaXMucmVjb3JkVHlwZSxcbiAgICAgIHR0bDogdGhpcy50dGw/LnRvU2Vjb25kcygpLFxuICAgICAgbWV0YToge1xuICAgICAgICBvcmlnX2N1c3RvbV90eXBlOiBcIkNGX1JFRElSRUNUXCIsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbn1cbiJdfQ==