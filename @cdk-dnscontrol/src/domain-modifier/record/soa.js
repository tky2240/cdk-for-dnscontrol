"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolSoaRecord = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_SOA_RECORD_SYMBOL = Symbol.for("DnscontrolSoaRecord");
class DnscontrolSoaRecord extends dnscontrol_record_1.DnscontrolRecord {
    mbox;
    refresh;
    retry;
    expire;
    minttl;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "SOA",
            label: props.label,
            target: props.target,
            ttl: props.ttl,
            isEnsuredAbsent: props.isEnsuredAbsent,
            meta: props.meta,
        });
        this.mbox = props.mbox;
        this.refresh = props.refresh;
        this.retry = props.retry;
        this.expire = props.expire;
        this.minttl = props.minttl;
    }
    static isDnscontrolSoaRecord(x) {
        return (x != null && typeof x === "object" && DNS_CONTROL_SOA_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            soaMbox: this.mbox,
            soaRefresh: this.refresh,
            soaRetry: this.retry,
            soaExpire: this.expire,
            soaMinTtl: this.minttl,
            meta: this.meta,
        };
    }
}
exports.DnscontrolSoaRecord = DnscontrolSoaRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29hLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsic29hLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJEQUF1RDtBQUV2RCxNQUFNLDZCQUE2QixHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsQ0FBQztBQWV4RSxNQUFhLG1CQUFvQixTQUFRLG9DQUFnQjtJQUN2QyxJQUFJLENBQVM7SUFDYixPQUFPLENBQVM7SUFDaEIsS0FBSyxDQUFTO0lBQ2QsTUFBTSxDQUFTO0lBQ2YsTUFBTSxDQUFTO0lBQy9CLFlBQVksS0FBZ0IsRUFBRSxFQUFVLEVBQUUsS0FBK0I7UUFDdkUsS0FBSyxDQUFDLEtBQUssRUFBRSxFQUFFLEVBQUU7WUFDZixVQUFVLEVBQUUsS0FBSztZQUNqQixLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUs7WUFDbEIsTUFBTSxFQUFFLEtBQUssQ0FBQyxNQUFNO1lBQ3BCLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRztZQUNkLGVBQWUsRUFBRSxLQUFLLENBQUMsZUFBZTtZQUN0QyxJQUFJLEVBQUUsS0FBSyxDQUFDLElBQUk7U0FDakIsQ0FBQyxDQUFDO1FBQ0gsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBQzNCLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQztJQUM3QixDQUFDO0lBQ00sTUFBTSxDQUFDLHFCQUFxQixDQUFDLENBQVU7UUFDNUMsT0FBTyxDQUNMLENBQUMsSUFBSSxJQUFJLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxJQUFJLDZCQUE2QixJQUFJLENBQUMsQ0FDekUsQ0FBQztJQUNKLENBQUM7SUFDTSxrQkFBa0I7UUFDdkIsT0FBTztZQUNMLElBQUksRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNmLE1BQU0sRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNuQixVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVU7WUFDM0IsR0FBRyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFO1lBQzFCLE9BQU8sRUFBRSxJQUFJLENBQUMsSUFBSTtZQUNsQixVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU87WUFDeEIsUUFBUSxFQUFFLElBQUksQ0FBQyxLQUFLO1lBQ3BCLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUN0QixTQUFTLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDdEIsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUF4Q0Qsa0RBd0NDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERuc2NvbnRyb2xTb2FSZWNvcmRDb25maWcgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtY29uZmlnXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy9kdXJhdGlvblwiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZCB9IGZyb20gXCIuL2Ruc2NvbnRyb2wtcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX1NPQV9SRUNPUkRfU1lNQk9MID0gU3ltYm9sLmZvcihcIkRuc2NvbnRyb2xTb2FSZWNvcmRcIik7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG5zY29udHJvbFNvYVJlY29yZFByb3BzIHtcbiAgcmVhZG9ubHkgbGFiZWw6IHN0cmluZztcbiAgcmVhZG9ubHkgdGFyZ2V0OiBzdHJpbmc7XG4gIHJlYWRvbmx5IG1ib3g6IHN0cmluZztcbiAgcmVhZG9ubHkgcmVmcmVzaDogbnVtYmVyO1xuICByZWFkb25seSByZXRyeTogbnVtYmVyO1xuICByZWFkb25seSBleHBpcmU6IG51bWJlcjtcbiAgcmVhZG9ubHkgbWludHRsOiBudW1iZXI7XG4gIHJlYWRvbmx5IHR0bD86IER1cmF0aW9uIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBpc0Vuc3VyZWRBYnNlbnQ/OiBib29sZWFuIHwgdW5kZWZpbmVkO1xuICByZWFkb25seSBtZXRhPzogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGNsYXNzIERuc2NvbnRyb2xTb2FSZWNvcmQgZXh0ZW5kcyBEbnNjb250cm9sUmVjb3JkIHtcbiAgcHVibGljIHJlYWRvbmx5IG1ib3g6IHN0cmluZztcbiAgcHVibGljIHJlYWRvbmx5IHJlZnJlc2g6IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IHJldHJ5OiBudW1iZXI7XG4gIHB1YmxpYyByZWFkb25seSBleHBpcmU6IG51bWJlcjtcbiAgcHVibGljIHJlYWRvbmx5IG1pbnR0bDogbnVtYmVyO1xuICBjb25zdHJ1Y3RvcihzY29wZTogQ29uc3RydWN0LCBpZDogc3RyaW5nLCBwcm9wczogRG5zY29udHJvbFNvYVJlY29yZFByb3BzKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIlNPQVwiLFxuICAgICAgbGFiZWw6IHByb3BzLmxhYmVsLFxuICAgICAgdGFyZ2V0OiBwcm9wcy50YXJnZXQsXG4gICAgICB0dGw6IHByb3BzLnR0bCxcbiAgICAgIGlzRW5zdXJlZEFic2VudDogcHJvcHMuaXNFbnN1cmVkQWJzZW50LFxuICAgICAgbWV0YTogcHJvcHMubWV0YSxcbiAgICB9KTtcbiAgICB0aGlzLm1ib3ggPSBwcm9wcy5tYm94O1xuICAgIHRoaXMucmVmcmVzaCA9IHByb3BzLnJlZnJlc2g7XG4gICAgdGhpcy5yZXRyeSA9IHByb3BzLnJldHJ5O1xuICAgIHRoaXMuZXhwaXJlID0gcHJvcHMuZXhwaXJlO1xuICAgIHRoaXMubWludHRsID0gcHJvcHMubWludHRsO1xuICB9XG4gIHB1YmxpYyBzdGF0aWMgaXNEbnNjb250cm9sU29hUmVjb3JkKHg6IHVua25vd24pOiB4IGlzIERuc2NvbnRyb2xTb2FSZWNvcmQge1xuICAgIHJldHVybiAoXG4gICAgICB4ICE9IG51bGwgJiYgdHlwZW9mIHggPT09IFwib2JqZWN0XCIgJiYgRE5TX0NPTlRST0xfU09BX1JFQ09SRF9TWU1CT0wgaW4geFxuICAgICk7XG4gIH1cbiAgcHVibGljIHJlbmRlclJlY29yZENvbmZpZygpOiBEbnNjb250cm9sU29hUmVjb3JkQ29uZmlnIHtcbiAgICByZXR1cm4ge1xuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgdGFyZ2V0OiB0aGlzLnRhcmdldCxcbiAgICAgIHJlY29yZFR5cGU6IHRoaXMucmVjb3JkVHlwZSxcbiAgICAgIHR0bDogdGhpcy50dGw/LnRvU2Vjb25kcygpLFxuICAgICAgc29hTWJveDogdGhpcy5tYm94LFxuICAgICAgc29hUmVmcmVzaDogdGhpcy5yZWZyZXNoLFxuICAgICAgc29hUmV0cnk6IHRoaXMucmV0cnksXG4gICAgICBzb2FFeHBpcmU6IHRoaXMuZXhwaXJlLFxuICAgICAgc29hTWluVHRsOiB0aGlzLm1pbnR0bCxcbiAgICAgIG1ldGE6IHRoaXMubWV0YSxcbiAgICB9O1xuICB9XG59XG4iXX0=