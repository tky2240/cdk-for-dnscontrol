"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DnscontrolDnskeyRecord = exports.getDnsKeyAlgorithmStringFromValue = exports.getDnsKeyProtocolStringFromValue = exports.getDnsKeyFlagStringFromValue = void 0;
const dnscontrol_record_1 = require("./dnscontrol-record");
const DNS_CONTROL_DNSKEY_RECORD_SYMBOL = Symbol.for("DnscontrolDnskeyRecord");
const dnskeyFlag = {
    ZSK: 256,
    KSK: 257,
};
function isDnskeyFlag(x) {
    return typeof x === "string" && Object.keys(dnskeyFlag).includes(x);
}
const getDnsKeyFlagStringFromValue = (value) => {
    const keyFlag = Object.entries(dnskeyFlag).find((keyFlag) => {
        return keyFlag[1] === value;
    });
    const dnskeyFlagString = keyFlag?.[0];
    if (isDnskeyFlag(dnskeyFlagString)) {
        return dnskeyFlagString;
    }
    throw new Error(`Invalid DNSKEY flag value: ${value}`);
};
exports.getDnsKeyFlagStringFromValue = getDnsKeyFlagStringFromValue;
const dnskeyProtocol = {
    DNSSEC: 3,
};
function isDnskeyProtocol(x) {
    return typeof x === "string" && Object.keys(dnskeyProtocol).includes(x);
}
const getDnsKeyProtocolStringFromValue = (value) => {
    const keyProtocol = Object.entries(dnskeyProtocol).find((keyProtocol) => {
        return keyProtocol[1] === value;
    });
    const dnskeyProtocolString = keyProtocol?.[0];
    if (isDnskeyProtocol(dnskeyProtocolString)) {
        return dnskeyProtocolString;
    }
    throw new Error(`Invalid DNSKEY protocol value: ${value}`);
};
exports.getDnsKeyProtocolStringFromValue = getDnsKeyProtocolStringFromValue;
//ref: https://www.iana.org/assignments/dns-sec-alg-numbers/dns-sec-alg-numbers.xhtml#prime-lengths
const dnskeyAlgorithm = {
    DELETE: 0,
    RSAMD5: 1,
    DH: 2,
    DSA: 3,
    RSASHA1: 5,
    "DSA-NSEC3-SHA1": 6,
    "RSASHA1-NSEC3-SHA1": 7,
    RSASHA256: 8,
    RSASHA512: 10,
    "ECC-GOST": 12,
    ECDSAP256SHA256: 13,
    ECDSAP384SHA384: 14,
    ED25519: 15,
    ED448: 16,
    SM2SM3: 17,
    "ECC-GOST12": 23,
    INDIRECT: 252,
    PRIVATEDNS: 253,
    PRIVATEOID: 254,
};
function isDnskeyAlgorithm(x) {
    return typeof x === "string" && Object.keys(dnskeyAlgorithm).includes(x);
}
const getDnsKeyAlgorithmStringFromValue = (value) => {
    const keyAlgorithm = Object.entries(dnskeyAlgorithm).find((keyAlgorithm) => {
        return keyAlgorithm[1] === value;
    });
    const dnskeyAlgorithmString = keyAlgorithm?.[0];
    if (isDnskeyAlgorithm(dnskeyAlgorithmString)) {
        return dnskeyAlgorithmString;
    }
    throw new Error(`Invalid DNSKEY algorithm value: ${value}`);
};
exports.getDnsKeyAlgorithmStringFromValue = getDnsKeyAlgorithmStringFromValue;
class DnscontrolDnskeyRecord extends dnscontrol_record_1.DnscontrolRecord {
    flag;
    protcol;
    algorithm;
    publickey;
    constructor(scope, id, props) {
        super(scope, id, {
            recordType: "DNSKEY",
            label: props.label,
            target: "",
            ttl: props.ttl,
            isEnsuredAbsent: props.isEnsuredAbsent,
            meta: props.meta,
        });
        this.algorithm = props.algorithm;
        this.flag = props.flag;
        this.protcol = props.protocol;
        this.publickey = props.publickey;
    }
    static isDnscontrolDnskeyRecord(x) {
        return (x != null &&
            typeof x === "object" &&
            DNS_CONTROL_DNSKEY_RECORD_SYMBOL in x);
    }
    renderRecordConfig() {
        return {
            name: this.name,
            target: this.target,
            recordType: this.recordType,
            ttl: this.ttl?.toSeconds(),
            dnskeyAlgorithm: dnskeyAlgorithm[this.algorithm],
            dnskeyFlags: dnskeyFlag[this.flag],
            dnskeyProtocol: dnskeyProtocol[this.protcol],
            dnskeyPublicKey: this.publickey,
            meta: this.meta,
        };
    }
}
exports.DnscontrolDnskeyRecord = DnscontrolDnskeyRecord;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG5za2V5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZG5za2V5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUdBLDJEQUF1RDtBQUV2RCxNQUFNLGdDQUFnQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztBQUU5RSxNQUFNLFVBQVUsR0FBRztJQUNqQixHQUFHLEVBQUUsR0FBRztJQUNSLEdBQUcsRUFBRSxHQUFHO0NBQ0EsQ0FBQztBQUVYLFNBQVMsWUFBWSxDQUFDLENBQVU7SUFDOUIsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdEUsQ0FBQztBQUNNLE1BQU0sNEJBQTRCLEdBQUcsQ0FBQyxLQUFhLEVBQWMsRUFBRTtJQUN4RSxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQzFELE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLEtBQUssQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEMsSUFBSSxZQUFZLENBQUMsZ0JBQWdCLENBQUMsRUFBRSxDQUFDO1FBQ25DLE9BQU8sZ0JBQWdCLENBQUM7SUFDMUIsQ0FBQztJQUNELE1BQU0sSUFBSSxLQUFLLENBQUMsOEJBQThCLEtBQUssRUFBRSxDQUFDLENBQUM7QUFDekQsQ0FBQyxDQUFDO0FBVFcsUUFBQSw0QkFBNEIsZ0NBU3ZDO0FBRUYsTUFBTSxjQUFjLEdBQUc7SUFDckIsTUFBTSxFQUFFLENBQUM7Q0FDRCxDQUFDO0FBRVgsU0FBUyxnQkFBZ0IsQ0FBQyxDQUFVO0lBQ2xDLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxJ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QUssQ0FBQyxJQUFJO1NBQ2pCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDO1FBQzlCLElBQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztJQUNuQyxDQUFDO0lBQ00sTUFBTSxDQUFDLHdCQUF3QixDQUNwQyxDQUFVO1FBRVYsT0FBTyxDQUNMLENBQUMsSUFBSSxJQUFJO1lBQ1QsT0FBTyxDQUFDLEtBQUssUUFBUTtZQUNyQixnQ0FBZ0MsSUFBSSxDQUFDLENBQ3RDLENBQUM7SUFDSixDQUFDO0lBQ00sa0JBQWtCO1FBQ3ZCLE9BQU87WUFDTCxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUk7WUFDZixNQUFNLEVBQUUsSUFBSSxDQUFDLE1BQU07WUFDbkIsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVO1lBQzNCLEdBQUcsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRTtZQUMxQixlQUFlLEVBQUUsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7WUFDaEQsV0FBVyxFQUFFLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ2xDLGNBQWMsRUFBRSxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQztZQUM1QyxlQUFlLEVBQUUsSUFBSSxDQUFDLFNBQVM7WUFDL0IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO1NBQ2hCLENBQUM7SUFDSixDQUFDO0NBQ0Y7QUE3Q0Qsd0RBNkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29uc3RydWN0IH0gZnJvbSBcImNvbnN0cnVjdHNcIjtcbmltcG9ydCB7IERuc2NvbnRyb2xEbnNrZXlSZWNvcmRDb25maWcgfSBmcm9tIFwiLi4vLi4vdHlwZXMvZG5zY29udHJvbC1yZWNvcmQtY29uZmlnXCI7XG5pbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gXCIuLi8uLi90eXBlcy9kdXJhdGlvblwiO1xuaW1wb3J0IHsgRG5zY29udHJvbFJlY29yZCB9IGZyb20gXCIuL2Ruc2NvbnRyb2wtcmVjb3JkXCI7XG5cbmNvbnN0IEROU19DT05UUk9MX0ROU0tFWV9SRUNPUkRfU1lNQk9MID0gU3ltYm9sLmZvcihcIkRuc2NvbnRyb2xEbnNrZXlSZWNvcmRcIik7XG5cbmNvbnN0IGRuc2tleUZsYWcgPSB7XG4gIFpTSzogMjU2LFxuICBLU0s6IDI1Nyxcbn0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBEbnNrZXlGbGFnID0ga2V5b2YgdHlwZW9mIGRuc2tleUZsYWc7XG5mdW5jdGlvbiBpc0Ruc2tleUZsYWcoeDogdW5rbm93bik6IHggaXMgRG5za2V5RmxhZyB7XG4gIHJldHVybiB0eXBlb2YgeCA9PT0gXCJzdHJpbmdcIiAmJiBPYmplY3Qua2V5cyhkbnNrZXlGbGFnKS5pbmNsdWRlcyh4KTtcbn1cbmV4cG9ydCBjb25zdCBnZXREbnNLZXlGbGFnU3RyaW5nRnJvbVZhbHVlID0gKHZhbHVlOiBudW1iZXIpOiBEbnNrZXlGbGFnID0+IHtcbiAgY29uc3Qga2V5RmxhZyA9IE9iamVjdC5lbnRyaWVzKGRuc2tleUZsYWcpLmZpbmQoKGtleUZsYWcpID0+IHtcbiAgICByZXR1cm4ga2V5RmxhZ1sxXSA9PT0gdmFsdWU7XG4gIH0pO1xuICBjb25zdCBkbnNrZXlGbGFnU3RyaW5nID0ga2V5RmxhZz8uWzBdO1xuICBpZiAoaXNEbnNrZXlGbGFnKGRuc2tleUZsYWdTdHJpbmcpKSB7XG4gICAgcmV0dXJuIGRuc2tleUZsYWdTdHJpbmc7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEROU0tFWSBmbGFnIHZhbHVlOiAke3ZhbHVlfWApO1xufTtcblxuY29uc3QgZG5za2V5UHJvdG9jb2wgPSB7XG4gIEROU1NFQzogMyxcbn0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBEbnNrZXlQcm90b2NvbCA9IGtleW9mIHR5cGVvZiBkbnNrZXlQcm90b2NvbDtcbmZ1bmN0aW9uIGlzRG5za2V5UHJvdG9jb2woeDogdW5rbm93bik6IHggaXMgRG5za2V5UHJvdG9jb2wge1xuICByZXR1cm4gdHlwZW9mIHggPT09IFwic3RyaW5nXCIgJiYgT2JqZWN0LmtleXMoZG5za2V5UHJvdG9jb2wpLmluY2x1ZGVzKHgpO1xufVxuZXhwb3J0IGNvbnN0IGdldERuc0tleVByb3RvY29sU3RyaW5nRnJvbVZhbHVlID0gKFxuICB2YWx1ZTogbnVtYmVyLFxuKTogRG5za2V5UHJvdG9jb2wgPT4ge1xuICBjb25zdCBrZXlQcm90b2NvbCA9IE9iamVjdC5lbnRyaWVzKGRuc2tleVByb3RvY29sKS5maW5kKChrZXlQcm90b2NvbCkgPT4ge1xuICAgIHJldHVybiBrZXlQcm90b2NvbFsxXSA9PT0gdmFsdWU7XG4gIH0pO1xuICBjb25zdCBkbnNrZXlQcm90b2NvbFN0cmluZyA9IGtleVByb3RvY29sPy5bMF07XG4gIGlmIChpc0Ruc2tleVByb3RvY29sKGRuc2tleVByb3RvY29sU3RyaW5nKSkge1xuICAgIHJldHVybiBkbnNrZXlQcm90b2NvbFN0cmluZztcbiAgfVxuICB0aHJvdyBuZXcgRXJyb3IoYEludmFsaWQgRE5TS0VZIHByb3RvY29sIHZhbHVlOiAke3ZhbHVlfWApO1xufTtcblxuLy9yZWY6IGh0dHBzOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL2Rucy1zZWMtYWxnLW51bWJlcnMvZG5zLXNlYy1hbGctbnVtYmVycy54aHRtbCNwcmltZS1sZW5ndGhzXG5jb25zdCBkbnNrZXlBbGdvcml0aG0gPSB7XG4gIERFTEVURTogMCxcbiAgUlNBTUQ1OiAxLFxuICBESDogMixcbiAgRFNBOiAzLFxuICBSU0FTSEExOiA1LFxuICBcIkRTQS1OU0VDMy1TSEExXCI6IDYsXG4gIFwiUlNBU0hBMS1OU0VDMy1TSEExXCI6IDcsXG4gIFJTQVNIQTI1NjogOCxcbiAgUlNBU0hBNTEyOiAxMCxcbiAgXCJFQ0MtR09TVFwiOiAxMixcbiAgRUNEU0FQMjU2U0hBMjU2OiAxMyxcbiAgRUNEU0FQMzg0U0hBMzg0OiAxNCxcbiAgRUQyNTUxOTogMTUsXG4gIEVENDQ4OiAxNixcbiAgU00yU00zOiAxNyxcbiAgXCJFQ0MtR09TVDEyXCI6IDIzLFxuICBJTkRJUkVDVDogMjUyLFxuICBQUklWQVRFRE5TOiAyNTMsXG4gIFBSSVZBVEVPSUQ6IDI1NCxcbn0gYXMgY29uc3Q7XG5leHBvcnQgdHlwZSBEbnNrZXlBbGdvcml0aG0gPSBrZXlvZiB0eXBlb2YgZG5za2V5QWxnb3JpdGhtO1xuZnVuY3Rpb24gaXNEbnNrZXlBbGdvcml0aG0oeDogdW5rbm93bik6IHggaXMgRG5za2V5QWxnb3JpdGhtIHtcbiAgcmV0dXJuIHR5cGVvZiB4ID09PSBcInN0cmluZ1wiICYmIE9iamVjdC5rZXlzKGRuc2tleUFsZ29yaXRobSkuaW5jbHVkZXMoeCk7XG59XG5leHBvcnQgY29uc3QgZ2V0RG5zS2V5QWxnb3JpdGhtU3RyaW5nRnJvbVZhbHVlID0gKFxuICB2YWx1ZTogbnVtYmVyLFxuKTogRG5za2V5QWxnb3JpdGhtID0+IHtcbiAgY29uc3Qga2V5QWxnb3JpdGhtID0gT2JqZWN0LmVudHJpZXMoZG5za2V5QWxnb3JpdGhtKS5maW5kKChrZXlBbGdvcml0aG0pID0+IHtcbiAgICByZXR1cm4ga2V5QWxnb3JpdGhtWzFdID09PSB2YWx1ZTtcbiAgfSk7XG4gIGNvbnN0IGRuc2tleUFsZ29yaXRobVN0cmluZyA9IGtleUFsZ29yaXRobT8uWzBdO1xuICBpZiAoaXNEbnNrZXlBbGdvcml0aG0oZG5za2V5QWxnb3JpdGhtU3RyaW5nKSkge1xuICAgIHJldHVybiBkbnNrZXlBbGdvcml0aG1TdHJpbmc7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIEROU0tFWSBhbGdvcml0aG0gdmFsdWU6ICR7dmFsdWV9YCk7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIERuc2NvbnRyb2xEbnNrZXlSZWNvcmRQcm9wcyB7XG4gIHJlYWRvbmx5IGxhYmVsOiBzdHJpbmc7XG4gIHJlYWRvbmx5IGZsYWc6IERuc2tleUZsYWc7XG4gIHJlYWRvbmx5IHByb3RvY29sOiBEbnNrZXlQcm90b2NvbDtcbiAgcmVhZG9ubHkgYWxnb3JpdGhtOiBEbnNrZXlBbGdvcml0aG07XG4gIHJlYWRvbmx5IHB1YmxpY2tleTogc3RyaW5nO1xuICByZWFkb25seSB0dGw/OiBEdXJhdGlvbiB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgaXNFbnN1cmVkQWJzZW50PzogYm9vbGVhbiB8IHVuZGVmaW5lZDtcbiAgcmVhZG9ubHkgbWV0YT86IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gfCB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEbnNjb250cm9sRG5za2V5UmVjb3JkIGV4dGVuZHMgRG5zY29udHJvbFJlY29yZCB7XG4gIHB1YmxpYyByZWFkb25seSBmbGFnOiBEbnNrZXlGbGFnO1xuICBwdWJsaWMgcmVhZG9ubHkgcHJvdGNvbDogRG5za2V5UHJvdG9jb2w7XG4gIHB1YmxpYyByZWFkb25seSBhbGdvcml0aG06IERuc2tleUFsZ29yaXRobTtcbiAgcHVibGljIHJlYWRvbmx5IHB1YmxpY2tleTogc3RyaW5nO1xuICBjb25zdHJ1Y3RvcihcbiAgICBzY29wZTogQ29uc3RydWN0LFxuICAgIGlkOiBzdHJpbmcsXG4gICAgcHJvcHM6IERuc2NvbnRyb2xEbnNrZXlSZWNvcmRQcm9wcyxcbiAgKSB7XG4gICAgc3VwZXIoc2NvcGUsIGlkLCB7XG4gICAgICByZWNvcmRUeXBlOiBcIkROU0tFWVwiLFxuICAgICAgbGFiZWw6IHByb3BzLmxhYmVsLFxuICAgICAgdGFyZ2V0OiBcIlwiLFxuICAgICAgdHRsOiBwcm9wcy50dGwsXG4gICAgICBpc0Vuc3VyZWRBYnNlbnQ6IHByb3BzLmlzRW5zdXJlZEFic2VudCxcbiAgICAgIG1ldGE6IHByb3BzLm1ldGEsXG4gICAgfSk7XG4gICAgdGhpcy5hbGdvcml0aG0gPSBwcm9wcy5hbGdvcml0aG07XG4gICAgdGhpcy5mbGFnID0gcHJvcHMuZmxhZztcbiAgICB0aGlzLnByb3Rjb2wgPSBwcm9wcy5wcm90b2NvbDtcbiAgICB0aGlzLnB1YmxpY2tleSA9IHByb3BzLnB1YmxpY2tleTtcbiAgfVxuICBwdWJsaWMgc3RhdGljIGlzRG5zY29udHJvbERuc2tleVJlY29yZChcbiAgICB4OiB1bmtub3duLFxuICApOiB4IGlzIERuc2NvbnRyb2xEbnNrZXlSZWNvcmQge1xuICAgIHJldHVybiAoXG4gICAgICB4ICE9IG51bGwgJiZcbiAgICAgIHR5cGVvZiB4ID09PSBcIm9iamVjdFwiICYmXG4gICAgICBETlNfQ09OVFJPTF9ETlNLRVlfUkVDT1JEX1NZTUJPTCBpbiB4XG4gICAgKTtcbiAgfVxuICBwdWJsaWMgcmVuZGVyUmVjb3JkQ29uZmlnKCk6IERuc2NvbnRyb2xEbnNrZXlSZWNvcmRDb25maWcge1xuICAgIHJldHVybiB7XG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICB0YXJnZXQ6IHRoaXMudGFyZ2V0LFxuICAgICAgcmVjb3JkVHlwZTogdGhpcy5yZWNvcmRUeXBlLFxuICAgICAgdHRsOiB0aGlzLnR0bD8udG9TZWNvbmRzKCksXG4gICAgICBkbnNrZXlBbGdvcml0aG06IGRuc2tleUFsZ29yaXRobVt0aGlzLmFsZ29yaXRobV0sXG4gICAgICBkbnNrZXlGbGFnczogZG5za2V5RmxhZ1t0aGlzLmZsYWddLFxuICAgICAgZG5za2V5UHJvdG9jb2w6IGRuc2tleVByb3RvY29sW3RoaXMucHJvdGNvbF0sXG4gICAgICBkbnNrZXlQdWJsaWNLZXk6IHRoaXMucHVibGlja2V5LFxuICAgICAgbWV0YTogdGhpcy5tZXRhLFxuICAgIH07XG4gIH1cbn1cbiJdfQ==