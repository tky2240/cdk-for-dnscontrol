{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CDK for dnscontrol","text":"<p>CDK for dnscontrol simplifies DNS management using the Cloud Development Kit (CDK).</p>"},{"location":"#requirements","title":"Requirements","text":"<ul> <li>Node.js &gt;= 22</li> <li>Go &gt;= 1.23.0</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install the CLI and library:</p> <pre><code># Install CLI\ngo install github.com/tky2240/cdk-for-dnscontrol/cdk-dnscontrol-cli@latest\n\n# Install CDK library\nnpm install @tky2240/cdk-for-dnscontrol\n</code></pre>"},{"location":"#usage","title":"Usage","text":""},{"location":"#write-cdk","title":"Write CDK","text":"<p>This example is based on the official dnscontrol tutorial.</p>"},{"location":"#1-create-a-stack","title":"1. Create a Stack","text":"<p>Create <code>lib/example-stack.ts</code>:</p> <pre><code>// filepath: ./lib/example-stack.ts\nimport { Construct } from \"constructs\";\nimport {\n  DnscontrolDomain,\n  DnscontrolDomainProps,\n  DnscontrolProvider,\n  DnscontrolDomainProviderProps,\n  DnscontrolRegistrar,\n  DnscontrolStack,\n  asIPv4Address,\n} from \"@tky2240/cdk-for-dnscontrol\";\n\nimport { DnscontrolARecord } from \"@tky2240/cdk-for-dnscontrol/domain-modifier/record\";\n\nimport * as recordFunction from \"@tky2240/cdk-for-dnscontrol/domain-modifier/function\"\n\nexport class ExampleStack extends DnscontrolStack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id, {});\n\n    const provider = new DnscontrolProvider(this, \"MyProvider\", {\n      providerName: \"bind\",\n    });\n    const registrar = new DnscontrolRegistrar(this, \"MyRegistrar\", {\n      registrarName: \"none\",\n    });\n\n    new ExampleDomain(this, \"MyDomain\", {\n      domainName: \"example.com\",\n      registrar: registrar,\n      domainProviderPropsList: [\n        {\n          domainProviderName: provider.providerName,\n        },\n      ],\n    });\n  }\n}\n\ninterface ExampleDomainProps extends DnscontrolDomainProps {\n  readonly domainName: string;\n  readonly registrar: DnscontrolRegistrar;\n  readonly domainProviderPropsList: readonly DnscontrolDomainProviderProps[];\n}\n\nexport class ExampleDomain extends DnscontrolDomain {\n  constructor(scope: DnscontrolStack, id: string, props: ExampleDomainProps) {\n    super(scope, id, props);\n    // CDK style\n    new DnscontrolARecord(this, \"MyARecord\", {\n      label: \"@\",\n      ip: asIPv4Address(\"1.2.3.4\"),\n    });\n    // or you can use dnscontrol style\n    recordFunction.A(this, \"@\", \"2.3.4.5\");\n  }\n}\n</code></pre>"},{"location":"#2-create-an-entry-point","title":"2. Create an Entry Point","text":"<p>Create <code>bin/index.ts</code>:</p> <pre><code>// filepath: ./bin/index.ts\nimport { App } from \"@tky2240/cdk-for-dnscontrol\";\nimport { ExampleStack } from \"../lib/example-stack\";\n\nconst app = new App();\n\nnew ExampleStack(app, \"ExampleStack\");\n\napp.synth();\n</code></pre>"},{"location":"#3-add-credentials","title":"3. Add Credentials","text":"<p>Create <code>creds.json</code>:</p> <pre><code>// filepath: ./creds.json\n{\n  \"bind\": {\n    \"TYPE\": \"BIND\"\n  }\n}\n</code></pre>"},{"location":"#4-apply-dns-configurations","title":"4. Apply DNS Configurations","text":"<p>Use the following commands to manage DNS configurations:</p> <pre><code># Show configuration differences\ncdk-dnscontrol-cli diff\n\n# Deploy DNS configurations\ncdk-dnscontrol-cli deploy\n</code></pre> <p>After applying, the zone file will be generated in the output directory.</p>"},{"location":"#migrate-from-dnsconfigjs","title":"Migrate from dnsconfig.js","text":""},{"location":"#limitations","title":"Limitations","text":"<ul> <li>Cannot use <code>IMPORT</code> and <code>TRANSFORM</code>.</li> <li>The following functions are not supported:<ul> <li><code>FETCH</code></li> <li><code>HASH</code></li> <li><code>PANIC</code></li> <li><code>getConfiguredDomains</code></li> </ul> </li> <li>Cannot use <code>require</code> and <code>require_glob</code>.</li> <li>If you use <code>D_EXTEND</code>, records are flattened in the CDK code.<ul> <li>It is recommended to split records into constructs instead of using <code>D_EXTEND</code>.</li> </ul> </li> </ul>"},{"location":"#1-migrate-from-dnsconfigjs","title":"1. Migrate from dnsconfig.js","text":"<p>Use the following command to migrate from <code>dnsconfig.js</code>:</p> <pre><code>cdk-dnscontrol migrate\n</code></pre>"},{"location":"#2-create-an-entry-point_1","title":"2. Create an Entry Point","text":"<p>Create <code>bin/index.ts</code>:</p> <pre><code>// filepath: ./bin/index.ts\nimport { App } from \"@tky2240/cdk-for-dnscontrol\";\nimport { MigrationStack } from \"../lib/stacks\";\n\nconst app = new App();\n\nnew MigrationStack(app, \"MigrationStack\");\n\napp.synth();\n</code></pre>"},{"location":"#3-add-credentials_1","title":"3. Add Credentials","text":"<p>Create <code>creds.json</code>:</p> <pre><code>// filepath: ./creds.json\n{\n  \"bind\": {\n    \"TYPE\": \"BIND\"\n  }\n}\n</code></pre>"},{"location":"#4-apply-dns-configurations_1","title":"4. Apply DNS Configurations","text":"<p>Use the following commands to manage DNS configurations:</p> <pre><code># Show configuration differences\ncdk-dnscontrol-cli diff\n\n# Deploy DNS configurations\ncdk-dnscontrol-cli deploy\n</code></pre> <p>After applying, the zone file will be generated in the output directory.</p>"},{"location":"#cli-options","title":"CLI Options","text":""},{"location":"#diff","title":"diff","text":"<p>The <code>diff</code> command compares the current DNS configurations with the desired state defined in your CDK code. It synthesizes the CDK application and displays the differences without applying any changes.</p> <pre><code>cdk-dnscontrol-cli diff\n</code></pre> <p>Use the <code>--cdk-entry-point</code> (or <code>-i</code>) flag to specify a custom entry point for the CDK application:</p> <pre><code>cdk-dnscontrol-cli diff --cdk-entry-point ./custom-entry.ts\n</code></pre>"},{"location":"#deploy","title":"deploy","text":"<p>The <code>deploy</code> command applies the desired DNS configurations defined in your CDK code. It synthesizes the CDK application and pushes the changes to the DNS provider.</p> <pre><code>cdk-dnscontrol-cli deploy\n</code></pre> <p>Use the <code>--cdk-entry-point</code> (or <code>-i</code>) flag to specify a custom entry point for the CDK application:</p> <pre><code>cdk-dnscontrol-cli deploy --cdk-entry-point ./custom-entry.ts\n</code></pre>"},{"location":"#migrate","title":"migrate","text":"<p>The <code>migrate</code> command helps convert an existing <code>dnsconfig.js</code> file into CDK code. It generates CDK constructs and stacks based on the DNS configurations defined in the <code>dnsconfig.js</code> file.</p> <pre><code>cdk-dnscontrol-cli migrate\n</code></pre> <p>Use the following flags to customize the migration process:</p> <ul> <li><code>--dnsconfig</code> (or <code>-d</code>): Specify the path to the <code>dnsconfig.js</code> file. Defaults to <code>./dnsconfig.js</code>.</li> <li><code>--outputDir</code> (or <code>-o</code>): Specify the output directory for the generated CDK code. Defaults to <code>./lib/stacks</code>.</li> </ul> <p>Example:</p> <pre><code>cdk-dnscontrol-cli migrate --dnsconfig ./path/to/dnsconfig.js --outputDir ./custom/output/dir\n</code></pre>"},{"location":"#contributing","title":"Contributing","text":"<p>Contributions are welcome! Please open an issue or submit a pull request.</p>"},{"location":"#roadmap","title":"Roadmap","text":"<ul> <li>General<ul> <li> Publish jsii packages</li> <li> Write documentation:<ul> <li> Examples</li> <li> API docs</li> <li> Migration guide</li> <li> Tutorial</li> <li> FAQ</li> </ul> </li> <li> Add CI/CD</li> </ul> </li> <li>CDK<ul> <li> Add Aspects</li> <li> Add CDK constructs</li> </ul> </li> <li>CLI<ul> <li> Support other languages</li> <li> Add options for <code>creds.json</code></li> </ul> </li> </ul>"},{"location":"cli/","title":"cdk-dnscontrol-cli Documentation","text":""},{"location":"cli/#overview","title":"Overview","text":"<p><code>cdk-dnscontrol-cli</code> is a CLI tool that allows you to synth, diff, and deploy DNS configurations written with CDK.</p>"},{"location":"cli/#installation","title":"Installation","text":"<p>Build with Go:</p> <pre><code>go build -o cdk-dnscontrol-cli ./cdk-dnscontrol-cli\n</code></pre>"},{"location":"cli/#subcommands","title":"Subcommands","text":""},{"location":"cli/#diff","title":"diff","text":"<p>Shows the difference between the DNS configuration generated by CDK synth and the current DNS state.</p> <pre><code>./cdk-dnscontrol-cli diff [--cdk-entry-point &lt;path&gt;] [--credentials-json &lt;path&gt;]\n</code></pre> <ul> <li><code>--cdk-entry-point</code>, <code>-i</code>: CDK entry point (default: <code>./bin/index.ts</code>)</li> <li><code>--credentials-json</code>, <code>-c</code>: Credentials file (default: <code>./creds.json</code>)</li> </ul>"},{"location":"cli/#deploy","title":"deploy","text":"<p>Applies the DNS configuration generated by CDK synth.</p> <pre><code>./cdk-dnscontrol-cli deploy [--cdk-entry-point &lt;path&gt;] [--credentials-json &lt;path&gt;]\n</code></pre> <ul> <li><code>--cdk-entry-point</code>, <code>-i</code>: CDK entry point (default: <code>./bin/index.ts</code>)</li> <li><code>--credentials-json</code>, <code>-c</code>: Credentials file (default: <code>./creds.json</code>)</li> </ul>"},{"location":"cli/#migration","title":"migration","text":"<p>Helps migrate from an existing <code>dnsconfig.js</code> to CDK stacks.</p> <pre><code>./cdk-dnscontrol-cli migration [--dnsconfig &lt;path&gt;] [--outputDir &lt;dir&gt;]\n</code></pre> <ul> <li><code>--dnsconfig</code>, <code>-d</code>: dnsconfig.js file (default: <code>./dnsconfig.js</code>)</li> <li><code>--outputDir</code>, <code>-o</code>: Output directory (default: <code>./lib/stacks</code>)</li> </ul>"},{"location":"cli/#examples","title":"Examples","text":"<pre><code>./cdk-dnscontrol-cli diff\n./cdk-dnscontrol-cli deploy -i ./bin/myentry.ts -c ./mycreds.json\n./cdk-dnscontrol-cli migration -d ./dnsconfig.js -o ./lib/stacks\n</code></pre>"},{"location":"cli/#notes","title":"Notes","text":"<ul> <li>Requires Node.js, tsx, npx, and other dependencies.</li> <li><code>creds.json</code> should contain your DNS provider credentials.</li> </ul>"},{"location":"cdk/cdk/","title":"cdk-for-dnscontrol API Documentation","text":""},{"location":"cdk/cdk/#classes-functions","title":"Classes &amp; Functions","text":""},{"location":"cdk/cdk/#app","title":"App","text":"<ul> <li>Entry point for the CDK application.</li> <li><code>new App(config: AppConfig)</code></li> </ul>"},{"location":"cdk/cdk/#dnscontrolstack","title":"DnscontrolStack","text":"<ul> <li>Stack for managing DNSControl configuration.</li> <li><code>new DnscontrolStack(scope, id, props)</code></li> <li><code>synth(outdir: string)</code>: Generates the DNSControl IR file.</li> </ul>"},{"location":"cdk/cdk/#dnscontroldomain","title":"DnscontrolDomain","text":"<ul> <li>Manages domain configuration.</li> <li><code>new DnscontrolDomain(scope, id, props)</code></li> <li><code>renderDomainConfig()</code>: Gets the domain configuration.</li> </ul>"},{"location":"cdk/cdk/#dnscontrolrecord","title":"DnscontrolRecord","text":"<ul> <li>Abstract class for DNS records.</li> <li>Inherited by each record type (A, CNAME, MX, TXT, etc.).</li> </ul>"},{"location":"cdk/cdk/#record-creation-functions","title":"Record Creation Functions","text":"<ul> <li><code>A(scope, label, target, ...)</code></li> <li><code>CNAME(scope, label, target, ...)</code></li> <li><code>MX(scope, label, target, preference, ...)</code></li> <li><code>TXT(scope, label, target, ...)</code></li> <li><code>DNSKEY(scope, label, target, flag, protocol, algorithm, publickey, ...)</code></li> <li>Many others</li> </ul>"},{"location":"cdk/cdk/#type-definitions","title":"Type Definitions","text":"<ul> <li><code>DnscontrolDnsConfig</code>: Type for overall DNSControl configuration</li> <li><code>DnscontrolDomainConfig</code>: Type for domain configuration</li> <li><code>DnscontrolRecordConfig</code>: Type for record configuration</li> </ul>"},{"location":"cdk/cdk/#reference","title":"Reference","text":"<ul> <li>For details, see the TypeScript type definition files and each record implementation.</li> </ul>"},{"location":"cdk/constructs/app/","title":"App","text":""},{"location":"cdk/constructs/app/#overview","title":"Overview","text":"<p>The <code>App</code> class is the entry point for a cdk-for-dnscontrol application. It manages the output directory and synthesizes all DNSControl stacks defined in the construct tree.</p>"},{"location":"cdk/constructs/app/#constructor","title":"Constructor","text":"<pre><code>new App(config?: AppConfig)\n</code></pre> <ul> <li><code>config.outDir</code> (optional): Output directory for generated files. Defaults to <code>\"cdk.out\"</code>.</li> </ul>"},{"location":"cdk/constructs/app/#properties","title":"Properties","text":"<ul> <li><code>outDir: string</code>   The output directory for synthesized files.</li> </ul>"},{"location":"cdk/constructs/app/#methods","title":"Methods","text":""},{"location":"cdk/constructs/app/#synth","title":"synth","text":"<pre><code>app.synth(): void\n</code></pre> <p>Synthesizes all <code>DnscontrolStack</code> instances in the construct tree and writes their IR files to the output directory.</p>"},{"location":"cdk/constructs/app/#usage-example","title":"Usage Example","text":"<pre><code>import { App, DnscontrolStack } from \"@tky2240/cdk-for-dnscontrol\";\n\nconst app = new App({ outDir: \"output\" });\nnew MyDnsStack(app, \"MyStack\", { /* stack props */ });\napp.synth();\n</code></pre>"},{"location":"cdk/constructs/dnscontrol-domain/","title":"DnscontrolDomain","text":""},{"location":"cdk/constructs/dnscontrol-domain/#overview","title":"Overview","text":"<p>The <code>DnscontrolDomain</code> class represents a domain managed by DNSControl. It collects providers, records, and other settings for a domain and outputs a configuration compatible with DNSControl.</p>"},{"location":"cdk/constructs/dnscontrol-domain/#constructor","title":"Constructor","text":"<pre><code>new DnscontrolDomain(scope: DnscontrolStack, id: string, props: DnscontrolDomainProps)\n</code></pre> <ul> <li><code>scope</code>: The parent <code>DnscontrolStack</code>.</li> <li><code>id</code>: Unique identifier for the domain.</li> <li><code>props.domainName</code>: Domain name (required).</li> <li><code>props.tag</code>: Optional tag for the domain.<ul> <li>This tag is used for split horizon DNS.</li> </ul> </li> <li><code>props.registrar</code>: Registrar construct (optional).</li> <li><code>props.domainProviderPropsList</code>: List of provider properties (required).<ul> <li>Each item should be an instance of <code>DnscontrolDomainProviderProps</code> that specifies the provider name and optional nameserver count.</li> <li>The provider name must match a registered <code>DnscontrolProvider</code>.</li> </ul> </li> <li><code>props.defaultTtl</code>: Default TTL for records (optional).</li> <li><code>props.isEnabledAutoDnssec</code>: Enable DNSSEC (optional).</li> <li><code>props.isDisabledIgnoreSafetyCheck</code>: Disable safety check (optional).</li> <li><code>props.shouldKeepExistingRecord</code>: Keep unknown records (optional).</li> <li><code>props.parentNameservers</code>: Parent nameservers (optional).</li> <li><code>props.parentNameserverTtl</code>: TTL for parent nameservers (optional).</li> <li><code>props.route53ZoneId</code>: Route53 zone ID (optional).</li> </ul>"},{"location":"cdk/constructs/dnscontrol-domain/#properties","title":"Properties","text":"<ul> <li><code>domainName: string</code></li> <li><code>tag?: string</code></li> <li><code>registrarName: string</code></li> <li><code>defaultTtl: Duration</code></li> <li><code>isEnabledAutoDnssec?: boolean</code></li> <li><code>isDisabledIgnoreSafetyCheck?: boolean</code></li> <li><code>shouldKeepExistingRecord?: boolean</code></li> <li><code>parentNameservers?: string[]</code></li> <li><code>parentNameserverTtl?: Duration</code></li> <li><code>route53ZoneId?: string</code></li> </ul>"},{"location":"cdk/constructs/dnscontrol-domain/#methods","title":"Methods","text":""},{"location":"cdk/constructs/dnscontrol-domain/#renderdomainconfig","title":"renderDomainConfig","text":"<p><pre><code>renderDomainConfig(): DnscontrolDomainConfig\n</code></pre> Renders the domain configuration as a JSON-compatible object for DNSControl.</p>"},{"location":"cdk/constructs/dnscontrol-domain/#isdnscontroldomain","title":"isDnscontrolDomain","text":"<pre><code>static isDnscontrolDomain(x: unknown): x is DnscontrolDomain\n</code></pre> <p>Type guard to check if an object is a <code>DnscontrolDomain</code>.</p>"},{"location":"cdk/constructs/dnscontrol-domain/#example","title":"Example","text":"<pre><code>import { DnscontrolDomain, DnscontrolStack } from \"@tky2240/cdk-for-dnscontrol\";\n\nclass MyDnsStack extends DnscontrolStack {\n  constructor(scope: Construct, id: string) {\n    super(scope, id, {});\n    const provider = new DnscontrolProvider(this, \"MyProvider\", {\n      providerName: \"bind\",\n    });\n    const registrar = new DnscontrolRegistrar(this, \"MyRegistrar\", {\n      registrarName: \"none\",\n    });\n    new DnscontrolDomain(this, \"ExampleDomain\", {\n      domainName: \"example.com\",\n      domainProviderPropsList: [\n        { domainProviderName: provider.providerName }\n      ],\n      registrar: registrar,\n    });\n  }\n}\n</code></pre>"},{"location":"cdk/constructs/dnscontrol-stack/","title":"DnscontrolStack","text":""},{"location":"cdk/constructs/dnscontrol-stack/#overview","title":"Overview","text":"<p>The <code>DnscontrolStack</code> class represents a stack for managing DNSControl configuration. It collects domain, provider, and registrar constructs and outputs a IR file.</p>"},{"location":"cdk/constructs/dnscontrol-stack/#constructor","title":"Constructor","text":"<pre><code>new DnscontrolStack(scope: Construct, id: string, props?: DnscontrolStackProps)\n</code></pre> <ul> <li><code>scope</code>: Parent construct.</li> <li><code>id</code>: Unique identifier for the stack.</li> <li><code>props.stackMetadataPath</code> (optional): Output file name for the stack metadata (default: <code>\"meta.json\"</code>).</li> </ul>"},{"location":"cdk/constructs/dnscontrol-stack/#methods","title":"Methods","text":""},{"location":"cdk/constructs/dnscontrol-stack/#synth","title":"synth","text":"<pre><code>synth(outdir: string): void\n</code></pre> <p>Synthesizes the DNSControl configuration and writes it as IR to the specified output directory. This method usually should be called by the <code>App</code> class.</p>"},{"location":"cdk/constructs/dnscontrol-stack/#usage-example","title":"Usage Example","text":"<pre><code>import { App, DnscontrolStack } from \"@tky2240/cdk-for-dnscontrol\";\n\nconst app = new App();\nclass MyDnsStack extends DnscontrolStack {\n  // define domains, providers, registrars here\n}\nnew MyDnsStack(app, \"MyStack\");\napp.synth();\n</code></pre>"},{"location":"cdk/constructs/dnscontrol-stack/#notes","title":"Notes","text":"<ul> <li>All domains, providers, and registrars added to the stack will be included in the output.</li> <li>The output file will be placed in the directory specified by <code>App.outDir</code>.</li> </ul>"},{"location":"cdk/functions/","title":"Functions","text":"<p>TODO</p>"}]}